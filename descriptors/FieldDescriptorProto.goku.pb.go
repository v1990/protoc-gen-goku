// Code generated by protoc-gen-goku. DO NOT EDIT.
// source: google/protobuf/descriptor.proto

package descriptors

import (
	bytes "bytes"
	jsonpb "github.com/gogo/protobuf/jsonpb"
	descriptorpb "google.golang.org/protobuf/types/descriptorpb"
)

// Describes a field within a message.
//   See: descriptorpb.FieldDescriptorProto
type FieldDescriptorProto struct {
	common

	pb *descriptorpb.FieldDescriptorProto

	options *FieldOptions
}

func newFieldDescriptorProto(desc *descriptorpb.FieldDescriptorProto) *FieldDescriptorProto {
	t := new(FieldDescriptorProto)
	t.pb = desc

	t.setDescriptor(t)

	return t
}

//   See descriptorpb.FieldDescriptorProto FieldDescriptorProto.Name
//   SourceCodeInfo.Location.Path: [4 4 2 0]
//   proto info: {"name":"name","number":1,"label":"LABEL_OPTIONAL","type":"TYPE_STRING","jsonName":"name"}
func (t *FieldDescriptorProto) GetName() (ret string) {
	if t.Empty() {
		return
	}

	return t.pb.GetName()

}

func (t *FieldDescriptorProto) Name() string {
	return t.GetName()
}

//   See descriptorpb.FieldDescriptorProto FieldDescriptorProto.Number
//   SourceCodeInfo.Location.Path: [4 4 2 1]
//   proto info: {"name":"number","number":3,"label":"LABEL_OPTIONAL","type":"TYPE_INT32","jsonName":"number"}
func (t *FieldDescriptorProto) GetNumber() (ret int32) {
	if t.Empty() {
		return
	}

	return t.pb.GetNumber()

}

func (t *FieldDescriptorProto) Number() int32 {
	return t.GetNumber()
}

//   See descriptorpb.FieldDescriptorProto FieldDescriptorProto.Label
//   SourceCodeInfo.Location.Path: [4 4 2 2]
//   proto info: {"name":"label","number":4,"label":"LABEL_OPTIONAL","type":"TYPE_ENUM","typeName":".google.protobuf.FieldDescriptorProto.Label","jsonName":"label"}
func (t *FieldDescriptorProto) GetLabel() (ret FieldDescriptorProto_Label) {
	if t.Empty() {
		return
	}

	return t.pb.GetLabel()

}

func (t *FieldDescriptorProto) Label() FieldDescriptorProto_Label {
	return t.GetLabel()
}

// If type_name is set, this need not be set.  If both this and type_name
// are set, this must be one of TYPE_ENUM, TYPE_MESSAGE or TYPE_GROUP.
//   See descriptorpb.FieldDescriptorProto FieldDescriptorProto.Type
//   SourceCodeInfo.Location.Path: [4 4 2 3]
//   proto info: {"name":"type","number":5,"label":"LABEL_OPTIONAL","type":"TYPE_ENUM","typeName":".google.protobuf.FieldDescriptorProto.Type","jsonName":"type"}
func (t *FieldDescriptorProto) GetType() (ret FieldDescriptorProto_Type) {
	if t.Empty() {
		return
	}

	return t.pb.GetType()

}

func (t *FieldDescriptorProto) Type() FieldDescriptorProto_Type {
	return t.GetType()
}

// For message and enum types, this is the name of the type.  If the name
// starts with a '.', it is fully-qualified.  Otherwise, C++-like scoping
// rules are used to find the type (i.e. first the nested types within this
// message are searched, then within the parent, on up to the root
// namespace).
//   See descriptorpb.FieldDescriptorProto FieldDescriptorProto.TypeName
//   SourceCodeInfo.Location.Path: [4 4 2 4]
//   proto info: {"name":"type_name","number":6,"label":"LABEL_OPTIONAL","type":"TYPE_STRING","jsonName":"typeName"}
func (t *FieldDescriptorProto) GetTypeName() (ret string) {
	if t.Empty() {
		return
	}

	return t.pb.GetTypeName()

}

func (t *FieldDescriptorProto) TypeName() string {
	return t.GetTypeName()
}

// For extensions, this is the name of the type being extended.  It is
// resolved in the same manner as type_name.
//   See descriptorpb.FieldDescriptorProto FieldDescriptorProto.Extendee
//   SourceCodeInfo.Location.Path: [4 4 2 5]
//   proto info: {"name":"extendee","number":2,"label":"LABEL_OPTIONAL","type":"TYPE_STRING","jsonName":"extendee"}
func (t *FieldDescriptorProto) GetExtendee() (ret string) {
	if t.Empty() {
		return
	}

	return t.pb.GetExtendee()

}

func (t *FieldDescriptorProto) Extendee() string {
	return t.GetExtendee()
}

// For numeric types, contains the original text representation of the value.
// For booleans, "true" or "false".
// For strings, contains the default text contents (not escaped in any way).
// For bytes, contains the C escaped value.  All bytes >= 128 are escaped.
// TODO(kenton):  Base-64 encode?
//   See descriptorpb.FieldDescriptorProto FieldDescriptorProto.DefaultValue
//   SourceCodeInfo.Location.Path: [4 4 2 6]
//   proto info: {"name":"default_value","number":7,"label":"LABEL_OPTIONAL","type":"TYPE_STRING","jsonName":"defaultValue"}
func (t *FieldDescriptorProto) GetDefaultValue() (ret string) {
	if t.Empty() {
		return
	}

	return t.pb.GetDefaultValue()

}

func (t *FieldDescriptorProto) DefaultValue() string {
	return t.GetDefaultValue()
}

// If set, gives the index of a oneof in the containing type's oneof_decl
// list.  This field is a member of that oneof.
//   See descriptorpb.FieldDescriptorProto FieldDescriptorProto.OneofIndex
//   SourceCodeInfo.Location.Path: [4 4 2 7]
//   proto info: {"name":"oneof_index","number":9,"label":"LABEL_OPTIONAL","type":"TYPE_INT32","jsonName":"oneofIndex"}
func (t *FieldDescriptorProto) GetOneofIndex() (ret int32) {
	if t.Empty() {
		return
	}

	return t.pb.GetOneofIndex()

}

func (t *FieldDescriptorProto) OneofIndex() int32 {
	return t.GetOneofIndex()
}

// JSON name of this field. The value is set by protocol compiler. If the
// user has set a "json_name" option on this field, that option's value
// will be used. Otherwise, it's deduced from the field's name by converting
// it to camelCase.
//   See descriptorpb.FieldDescriptorProto FieldDescriptorProto.JsonName
//   SourceCodeInfo.Location.Path: [4 4 2 8]
//   proto info: {"name":"json_name","number":10,"label":"LABEL_OPTIONAL","type":"TYPE_STRING","jsonName":"jsonName"}
func (t *FieldDescriptorProto) GetJsonName() (ret string) {
	if t.Empty() {
		return
	}

	return t.pb.GetJsonName()

}

func (t *FieldDescriptorProto) JsonName() string {
	return t.GetJsonName()
}

//   See descriptorpb.FieldDescriptorProto FieldDescriptorProto.Options
//   SourceCodeInfo.Location.Path: [4 4 2 9]
//   proto info: {"name":"options","number":8,"label":"LABEL_OPTIONAL","type":"TYPE_MESSAGE","typeName":".google.protobuf.FieldOptions","jsonName":"options"}
func (t *FieldDescriptorProto) GetOptions() (ret *FieldOptions) {
	if t.Empty() {
		return
	}

	if t.options != nil {
		return t.options
	}

	t.options = newFieldOptions(t.pb.GetOptions())
	t.options.setParent(t)

	return t.options

}

func (t *FieldDescriptorProto) Options() *FieldOptions {
	return t.GetOptions()
}

func (t *FieldDescriptorProto) PbDescriptor() *descriptorpb.FieldDescriptorProto {
	if t == nil || t.pb == nil {
		return nil
	}
	return t.pb
}

func (t *FieldDescriptorProto) FieldDescriptorProto() *descriptorpb.FieldDescriptorProto {
	return t.PbDescriptor()
}

func (t *FieldDescriptorProto) MarshalJSON() (b []byte, err error) {
	if t.Empty() {
		return
	}
	buf := bytes.NewBuffer(nil)
	err = (&jsonpb.Marshaler{}).Marshal(buf, t.pb)
	return buf.Bytes(), err
}

// implement DescriptorCommon.Empty()
func (t *FieldDescriptorProto) Empty() bool {
	return t == nil || t.pb == nil
}

// implement DescriptorCommon.Index()
func (t *FieldDescriptorProto) Index() int {
	if t.Empty() {
		return -1
	}

	return t.getIndex()
}

// implement DescriptorCommon.File()
func (t *FieldDescriptorProto) File() *FileDescriptorProto {
	if t.Empty() {
		return nil
	}

	return t.getFile()
}

// implement DescriptorCommon.Parent()
func (t *FieldDescriptorProto) Parent() DescriptorCommon {
	if t.Empty() {
		return nil
	}

	return t.getParent()
}

// implement DescriptorCommon.LocationPath()
func (t *FieldDescriptorProto) LocationPath() LocationPath {
	if t.Empty() {
		return nil
	}

	return t.getLocationPath()
}
