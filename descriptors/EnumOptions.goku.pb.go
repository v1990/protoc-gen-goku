// Code generated by protoc-gen-goku. DO NOT EDIT.
// source: google/protobuf/descriptor.proto

package descriptors

import (
	"google.golang.org/protobuf/types/descriptorpb"
)

//   See: descriptorpb.EnumOptions
type EnumOptions struct {
	common

	pb *descriptorpb.EnumOptions

	uninterpreted_option []*UninterpretedOption
}

func newEnumOptions(desc *descriptorpb.EnumOptions) *EnumOptions {
	t := new(EnumOptions)
	t.pb = desc

	t.setDescriptor(t)

	return t
}

// Set this option to true to allow mapping different tag names to the same
// value.
//   See descriptorpb.EnumOptions EnumOptions.AllowAlias
//   SourceCodeInfo.Location.Path: [4 14 2 0]
//   proto info: {}
func (t *EnumOptions) GetAllowAlias() (ret bool) {
	if t.Empty() {
		return
	}

	return t.pb.GetAllowAlias()

}

func (t *EnumOptions) AllowAlias() bool {
	return t.GetAllowAlias()
}

// Is this enum deprecated?
// Depending on the target platform, this can emit Deprecated annotations
// for the enum, or it will be completely ignored; in the very least, this
// is a formalization for deprecating enums.
//   See descriptorpb.EnumOptions EnumOptions.Deprecated
//   SourceCodeInfo.Location.Path: [4 14 2 1]
//   proto info: {}
func (t *EnumOptions) GetDeprecated() (ret bool) {
	if t.Empty() {
		return
	}

	return t.pb.GetDeprecated()

}

func (t *EnumOptions) Deprecated() bool {
	return t.GetDeprecated()
}

// The parser stores options it doesn't recognize here. See above.
//   See descriptorpb.EnumOptions EnumOptions.UninterpretedOption
//   SourceCodeInfo.Location.Path: [4 14 2 2]
//   proto info: {}
func (t *EnumOptions) GetUninterpretedOption() (ret []*UninterpretedOption) {
	if t.Empty() {
		return
	}

	if t.uninterpreted_option != nil {
		return t.uninterpreted_option
	}

	t.uninterpreted_option = make([]*UninterpretedOption, len(t.pb.GetUninterpretedOption()))

	for i, item := range t.pb.GetUninterpretedOption() {
		elem := newUninterpretedOption(item)
		elem.setParent(t)
		elem.setIndex(i)
		t.uninterpreted_option[i] = elem
	}

	return t.uninterpreted_option

}

func (t *EnumOptions) UninterpretedOption() []*UninterpretedOption {
	return t.GetUninterpretedOption()
}

func (t *EnumOptions) PbDescriptor() *descriptorpb.EnumOptions {
	if t == nil || t.pb == nil {
		return nil
	}
	return t.pb
}

func (t *EnumOptions) EnumOptions() *descriptorpb.EnumOptions {
	return t.PbDescriptor()
}

/*
func (t *EnumOptions) MarshalJSON() (b []byte,err error) {
    if t.Empty() {
        return
    }
    buf := bytes.NewBuffer(nil)
    err = (&jsonpb.Marshaler{}).Marshal(buf, t.pb)
    return buf.Bytes(), err
}
*/

// ExportFields returns can export fields
func (t *EnumOptions) ExportFields() map[string]interface{} {
	return map[string]interface{}{
		"AllowAlias":          t.AllowAlias(),
		"Deprecated":          t.Deprecated(),
		"UninterpretedOption": t.UninterpretedOption(),
	}
}

// implement DescriptorCommon.Empty()
func (t *EnumOptions) Empty() bool {
	return t == nil || t.pb == nil
}

// implement DescriptorCommon.Index()
func (t *EnumOptions) Index() int {
	if t.Empty() {
		return -1
	}

	return t.getIndex()
}

// implement DescriptorCommon.File()
func (t *EnumOptions) File() *FileDescriptorProto {
	if t.Empty() {
		return nil
	}

	return t.getFile()
}

// implement DescriptorCommon.Parent()
func (t *EnumOptions) Parent() DescriptorCommon {
	if t.Empty() {
		return nil
	}

	return t.getParent()
}

// implement DescriptorCommon.LocationPath()
func (t *EnumOptions) LocationPath() LocationPath {
	if t.Empty() {
		return nil
	}

	return t.getLocationPath()
}

func (t *EnumOptions) Comments() *SourceCodeInfo_Location {
	if t.Empty() {
		return nil
	}
	return t.getComments()
}
