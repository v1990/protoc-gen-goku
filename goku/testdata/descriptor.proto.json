{
  "fileToGenerate": [
    "google/protobuf/descriptor.proto"
  ],
  "parameter": "",
  "protoFile": [
    {
      "name": "google/protobuf/descriptor.proto",
      "package": "google.protobuf",
      "messageType": [
        {
          "name": "FileDescriptorSet",
          "field": [
            {
              "name": "file",
              "number": 1,
              "label": "LABEL_REPEATED",
              "type": "TYPE_MESSAGE",
              "typeName": ".google.protobuf.FileDescriptorProto",
              "jsonName": "file"
            }
          ]
        },
        {
          "name": "FileDescriptorProto",
          "field": [
            {
              "name": "name",
              "number": 1,
              "label": "LABEL_OPTIONAL",
              "type": "TYPE_STRING",
              "jsonName": "name"
            },
            {
              "name": "package",
              "number": 2,
              "label": "LABEL_OPTIONAL",
              "type": "TYPE_STRING",
              "jsonName": "package"
            },
            {
              "name": "dependency",
              "number": 3,
              "label": "LABEL_REPEATED",
              "type": "TYPE_STRING",
              "jsonName": "dependency"
            },
            {
              "name": "public_dependency",
              "number": 10,
              "label": "LABEL_REPEATED",
              "type": "TYPE_INT32",
              "jsonName": "publicDependency"
            },
            {
              "name": "weak_dependency",
              "number": 11,
              "label": "LABEL_REPEATED",
              "type": "TYPE_INT32",
              "jsonName": "weakDependency"
            },
            {
              "name": "message_type",
              "number": 4,
              "label": "LABEL_REPEATED",
              "type": "TYPE_MESSAGE",
              "typeName": ".google.protobuf.DescriptorProto",
              "jsonName": "messageType"
            },
            {
              "name": "enum_type",
              "number": 5,
              "label": "LABEL_REPEATED",
              "type": "TYPE_MESSAGE",
              "typeName": ".google.protobuf.EnumDescriptorProto",
              "jsonName": "enumType"
            },
            {
              "name": "service",
              "number": 6,
              "label": "LABEL_REPEATED",
              "type": "TYPE_MESSAGE",
              "typeName": ".google.protobuf.ServiceDescriptorProto",
              "jsonName": "service"
            },
            {
              "name": "extension",
              "number": 7,
              "label": "LABEL_REPEATED",
              "type": "TYPE_MESSAGE",
              "typeName": ".google.protobuf.FieldDescriptorProto",
              "jsonName": "extension"
            },
            {
              "name": "options",
              "number": 8,
              "label": "LABEL_OPTIONAL",
              "type": "TYPE_MESSAGE",
              "typeName": ".google.protobuf.FileOptions",
              "jsonName": "options"
            },
            {
              "name": "source_code_info",
              "number": 9,
              "label": "LABEL_OPTIONAL",
              "type": "TYPE_MESSAGE",
              "typeName": ".google.protobuf.SourceCodeInfo",
              "jsonName": "sourceCodeInfo"
            },
            {
              "name": "syntax",
              "number": 12,
              "label": "LABEL_OPTIONAL",
              "type": "TYPE_STRING",
              "jsonName": "syntax"
            }
          ]
        },
        {
          "name": "DescriptorProto",
          "field": [
            {
              "name": "name",
              "number": 1,
              "label": "LABEL_OPTIONAL",
              "type": "TYPE_STRING",
              "jsonName": "name"
            },
            {
              "name": "field",
              "number": 2,
              "label": "LABEL_REPEATED",
              "type": "TYPE_MESSAGE",
              "typeName": ".google.protobuf.FieldDescriptorProto",
              "jsonName": "field"
            },
            {
              "name": "extension",
              "number": 6,
              "label": "LABEL_REPEATED",
              "type": "TYPE_MESSAGE",
              "typeName": ".google.protobuf.FieldDescriptorProto",
              "jsonName": "extension"
            },
            {
              "name": "nested_type",
              "number": 3,
              "label": "LABEL_REPEATED",
              "type": "TYPE_MESSAGE",
              "typeName": ".google.protobuf.DescriptorProto",
              "jsonName": "nestedType"
            },
            {
              "name": "enum_type",
              "number": 4,
              "label": "LABEL_REPEATED",
              "type": "TYPE_MESSAGE",
              "typeName": ".google.protobuf.EnumDescriptorProto",
              "jsonName": "enumType"
            },
            {
              "name": "extension_range",
              "number": 5,
              "label": "LABEL_REPEATED",
              "type": "TYPE_MESSAGE",
              "typeName": ".google.protobuf.DescriptorProto.ExtensionRange",
              "jsonName": "extensionRange"
            },
            {
              "name": "oneof_decl",
              "number": 8,
              "label": "LABEL_REPEATED",
              "type": "TYPE_MESSAGE",
              "typeName": ".google.protobuf.OneofDescriptorProto",
              "jsonName": "oneofDecl"
            },
            {
              "name": "options",
              "number": 7,
              "label": "LABEL_OPTIONAL",
              "type": "TYPE_MESSAGE",
              "typeName": ".google.protobuf.MessageOptions",
              "jsonName": "options"
            },
            {
              "name": "reserved_range",
              "number": 9,
              "label": "LABEL_REPEATED",
              "type": "TYPE_MESSAGE",
              "typeName": ".google.protobuf.DescriptorProto.ReservedRange",
              "jsonName": "reservedRange"
            },
            {
              "name": "reserved_name",
              "number": 10,
              "label": "LABEL_REPEATED",
              "type": "TYPE_STRING",
              "jsonName": "reservedName"
            }
          ],
          "nestedType": [
            {
              "name": "ExtensionRange",
              "field": [
                {
                  "name": "start",
                  "number": 1,
                  "label": "LABEL_OPTIONAL",
                  "type": "TYPE_INT32",
                  "jsonName": "start"
                },
                {
                  "name": "end",
                  "number": 2,
                  "label": "LABEL_OPTIONAL",
                  "type": "TYPE_INT32",
                  "jsonName": "end"
                },
                {
                  "name": "options",
                  "number": 3,
                  "label": "LABEL_OPTIONAL",
                  "type": "TYPE_MESSAGE",
                  "typeName": ".google.protobuf.ExtensionRangeOptions",
                  "jsonName": "options"
                }
              ]
            },
            {
              "name": "ReservedRange",
              "field": [
                {
                  "name": "start",
                  "number": 1,
                  "label": "LABEL_OPTIONAL",
                  "type": "TYPE_INT32",
                  "jsonName": "start"
                },
                {
                  "name": "end",
                  "number": 2,
                  "label": "LABEL_OPTIONAL",
                  "type": "TYPE_INT32",
                  "jsonName": "end"
                }
              ]
            }
          ]
        },
        {
          "name": "ExtensionRangeOptions",
          "field": [
            {
              "name": "uninterpreted_option",
              "number": 999,
              "label": "LABEL_REPEATED",
              "type": "TYPE_MESSAGE",
              "typeName": ".google.protobuf.UninterpretedOption",
              "jsonName": "uninterpretedOption"
            }
          ],
          "extensionRange": [
            {
              "start": 1000,
              "end": 536870912
            }
          ]
        },
        {
          "name": "FieldDescriptorProto",
          "field": [
            {
              "name": "name",
              "number": 1,
              "label": "LABEL_OPTIONAL",
              "type": "TYPE_STRING",
              "jsonName": "name"
            },
            {
              "name": "number",
              "number": 3,
              "label": "LABEL_OPTIONAL",
              "type": "TYPE_INT32",
              "jsonName": "number"
            },
            {
              "name": "label",
              "number": 4,
              "label": "LABEL_OPTIONAL",
              "type": "TYPE_ENUM",
              "typeName": ".google.protobuf.FieldDescriptorProto.Label",
              "jsonName": "label"
            },
            {
              "name": "type",
              "number": 5,
              "label": "LABEL_OPTIONAL",
              "type": "TYPE_ENUM",
              "typeName": ".google.protobuf.FieldDescriptorProto.Type",
              "jsonName": "type"
            },
            {
              "name": "type_name",
              "number": 6,
              "label": "LABEL_OPTIONAL",
              "type": "TYPE_STRING",
              "jsonName": "typeName"
            },
            {
              "name": "extendee",
              "number": 2,
              "label": "LABEL_OPTIONAL",
              "type": "TYPE_STRING",
              "jsonName": "extendee"
            },
            {
              "name": "default_value",
              "number": 7,
              "label": "LABEL_OPTIONAL",
              "type": "TYPE_STRING",
              "jsonName": "defaultValue"
            },
            {
              "name": "oneof_index",
              "number": 9,
              "label": "LABEL_OPTIONAL",
              "type": "TYPE_INT32",
              "jsonName": "oneofIndex"
            },
            {
              "name": "json_name",
              "number": 10,
              "label": "LABEL_OPTIONAL",
              "type": "TYPE_STRING",
              "jsonName": "jsonName"
            },
            {
              "name": "options",
              "number": 8,
              "label": "LABEL_OPTIONAL",
              "type": "TYPE_MESSAGE",
              "typeName": ".google.protobuf.FieldOptions",
              "jsonName": "options"
            }
          ],
          "enumType": [
            {
              "name": "Type",
              "value": [
                {
                  "name": "TYPE_DOUBLE",
                  "number": 1
                },
                {
                  "name": "TYPE_FLOAT",
                  "number": 2
                },
                {
                  "name": "TYPE_INT64",
                  "number": 3
                },
                {
                  "name": "TYPE_UINT64",
                  "number": 4
                },
                {
                  "name": "TYPE_INT32",
                  "number": 5
                },
                {
                  "name": "TYPE_FIXED64",
                  "number": 6
                },
                {
                  "name": "TYPE_FIXED32",
                  "number": 7
                },
                {
                  "name": "TYPE_BOOL",
                  "number": 8
                },
                {
                  "name": "TYPE_STRING",
                  "number": 9
                },
                {
                  "name": "TYPE_GROUP",
                  "number": 10
                },
                {
                  "name": "TYPE_MESSAGE",
                  "number": 11
                },
                {
                  "name": "TYPE_BYTES",
                  "number": 12
                },
                {
                  "name": "TYPE_UINT32",
                  "number": 13
                },
                {
                  "name": "TYPE_ENUM",
                  "number": 14
                },
                {
                  "name": "TYPE_SFIXED32",
                  "number": 15
                },
                {
                  "name": "TYPE_SFIXED64",
                  "number": 16
                },
                {
                  "name": "TYPE_SINT32",
                  "number": 17
                },
                {
                  "name": "TYPE_SINT64",
                  "number": 18
                }
              ]
            },
            {
              "name": "Label",
              "value": [
                {
                  "name": "LABEL_OPTIONAL",
                  "number": 1
                },
                {
                  "name": "LABEL_REQUIRED",
                  "number": 2
                },
                {
                  "name": "LABEL_REPEATED",
                  "number": 3
                }
              ]
            }
          ]
        },
        {
          "name": "OneofDescriptorProto",
          "field": [
            {
              "name": "name",
              "number": 1,
              "label": "LABEL_OPTIONAL",
              "type": "TYPE_STRING",
              "jsonName": "name"
            },
            {
              "name": "options",
              "number": 2,
              "label": "LABEL_OPTIONAL",
              "type": "TYPE_MESSAGE",
              "typeName": ".google.protobuf.OneofOptions",
              "jsonName": "options"
            }
          ]
        },
        {
          "name": "EnumDescriptorProto",
          "field": [
            {
              "name": "name",
              "number": 1,
              "label": "LABEL_OPTIONAL",
              "type": "TYPE_STRING",
              "jsonName": "name"
            },
            {
              "name": "value",
              "number": 2,
              "label": "LABEL_REPEATED",
              "type": "TYPE_MESSAGE",
              "typeName": ".google.protobuf.EnumValueDescriptorProto",
              "jsonName": "value"
            },
            {
              "name": "options",
              "number": 3,
              "label": "LABEL_OPTIONAL",
              "type": "TYPE_MESSAGE",
              "typeName": ".google.protobuf.EnumOptions",
              "jsonName": "options"
            },
            {
              "name": "reserved_range",
              "number": 4,
              "label": "LABEL_REPEATED",
              "type": "TYPE_MESSAGE",
              "typeName": ".google.protobuf.EnumDescriptorProto.EnumReservedRange",
              "jsonName": "reservedRange"
            },
            {
              "name": "reserved_name",
              "number": 5,
              "label": "LABEL_REPEATED",
              "type": "TYPE_STRING",
              "jsonName": "reservedName"
            }
          ],
          "nestedType": [
            {
              "name": "EnumReservedRange",
              "field": [
                {
                  "name": "start",
                  "number": 1,
                  "label": "LABEL_OPTIONAL",
                  "type": "TYPE_INT32",
                  "jsonName": "start"
                },
                {
                  "name": "end",
                  "number": 2,
                  "label": "LABEL_OPTIONAL",
                  "type": "TYPE_INT32",
                  "jsonName": "end"
                }
              ]
            }
          ]
        },
        {
          "name": "EnumValueDescriptorProto",
          "field": [
            {
              "name": "name",
              "number": 1,
              "label": "LABEL_OPTIONAL",
              "type": "TYPE_STRING",
              "jsonName": "name"
            },
            {
              "name": "number",
              "number": 2,
              "label": "LABEL_OPTIONAL",
              "type": "TYPE_INT32",
              "jsonName": "number"
            },
            {
              "name": "options",
              "number": 3,
              "label": "LABEL_OPTIONAL",
              "type": "TYPE_MESSAGE",
              "typeName": ".google.protobuf.EnumValueOptions",
              "jsonName": "options"
            }
          ]
        },
        {
          "name": "ServiceDescriptorProto",
          "field": [
            {
              "name": "name",
              "number": 1,
              "label": "LABEL_OPTIONAL",
              "type": "TYPE_STRING",
              "jsonName": "name"
            },
            {
              "name": "method",
              "number": 2,
              "label": "LABEL_REPEATED",
              "type": "TYPE_MESSAGE",
              "typeName": ".google.protobuf.MethodDescriptorProto",
              "jsonName": "method"
            },
            {
              "name": "options",
              "number": 3,
              "label": "LABEL_OPTIONAL",
              "type": "TYPE_MESSAGE",
              "typeName": ".google.protobuf.ServiceOptions",
              "jsonName": "options"
            }
          ]
        },
        {
          "name": "MethodDescriptorProto",
          "field": [
            {
              "name": "name",
              "number": 1,
              "label": "LABEL_OPTIONAL",
              "type": "TYPE_STRING",
              "jsonName": "name"
            },
            {
              "name": "input_type",
              "number": 2,
              "label": "LABEL_OPTIONAL",
              "type": "TYPE_STRING",
              "jsonName": "inputType"
            },
            {
              "name": "output_type",
              "number": 3,
              "label": "LABEL_OPTIONAL",
              "type": "TYPE_STRING",
              "jsonName": "outputType"
            },
            {
              "name": "options",
              "number": 4,
              "label": "LABEL_OPTIONAL",
              "type": "TYPE_MESSAGE",
              "typeName": ".google.protobuf.MethodOptions",
              "jsonName": "options"
            },
            {
              "name": "client_streaming",
              "number": 5,
              "label": "LABEL_OPTIONAL",
              "type": "TYPE_BOOL",
              "defaultValue": "false",
              "jsonName": "clientStreaming"
            },
            {
              "name": "server_streaming",
              "number": 6,
              "label": "LABEL_OPTIONAL",
              "type": "TYPE_BOOL",
              "defaultValue": "false",
              "jsonName": "serverStreaming"
            }
          ]
        },
        {
          "name": "FileOptions",
          "field": [
            {
              "name": "java_package",
              "number": 1,
              "label": "LABEL_OPTIONAL",
              "type": "TYPE_STRING",
              "jsonName": "javaPackage"
            },
            {
              "name": "java_outer_classname",
              "number": 8,
              "label": "LABEL_OPTIONAL",
              "type": "TYPE_STRING",
              "jsonName": "javaOuterClassname"
            },
            {
              "name": "java_multiple_files",
              "number": 10,
              "label": "LABEL_OPTIONAL",
              "type": "TYPE_BOOL",
              "defaultValue": "false",
              "jsonName": "javaMultipleFiles"
            },
            {
              "name": "java_generate_equals_and_hash",
              "number": 20,
              "label": "LABEL_OPTIONAL",
              "type": "TYPE_BOOL",
              "jsonName": "javaGenerateEqualsAndHash",
              "options": {
                "deprecated": true
              }
            },
            {
              "name": "java_string_check_utf8",
              "number": 27,
              "label": "LABEL_OPTIONAL",
              "type": "TYPE_BOOL",
              "defaultValue": "false",
              "jsonName": "javaStringCheckUtf8"
            },
            {
              "name": "optimize_for",
              "number": 9,
              "label": "LABEL_OPTIONAL",
              "type": "TYPE_ENUM",
              "typeName": ".google.protobuf.FileOptions.OptimizeMode",
              "defaultValue": "SPEED",
              "jsonName": "optimizeFor"
            },
            {
              "name": "go_package",
              "number": 11,
              "label": "LABEL_OPTIONAL",
              "type": "TYPE_STRING",
              "jsonName": "goPackage"
            },
            {
              "name": "cc_generic_services",
              "number": 16,
              "label": "LABEL_OPTIONAL",
              "type": "TYPE_BOOL",
              "defaultValue": "false",
              "jsonName": "ccGenericServices"
            },
            {
              "name": "java_generic_services",
              "number": 17,
              "label": "LABEL_OPTIONAL",
              "type": "TYPE_BOOL",
              "defaultValue": "false",
              "jsonName": "javaGenericServices"
            },
            {
              "name": "py_generic_services",
              "number": 18,
              "label": "LABEL_OPTIONAL",
              "type": "TYPE_BOOL",
              "defaultValue": "false",
              "jsonName": "pyGenericServices"
            },
            {
              "name": "php_generic_services",
              "number": 42,
              "label": "LABEL_OPTIONAL",
              "type": "TYPE_BOOL",
              "defaultValue": "false",
              "jsonName": "phpGenericServices"
            },
            {
              "name": "deprecated",
              "number": 23,
              "label": "LABEL_OPTIONAL",
              "type": "TYPE_BOOL",
              "defaultValue": "false",
              "jsonName": "deprecated"
            },
            {
              "name": "cc_enable_arenas",
              "number": 31,
              "label": "LABEL_OPTIONAL",
              "type": "TYPE_BOOL",
              "defaultValue": "false",
              "jsonName": "ccEnableArenas"
            },
            {
              "name": "objc_class_prefix",
              "number": 36,
              "label": "LABEL_OPTIONAL",
              "type": "TYPE_STRING",
              "jsonName": "objcClassPrefix"
            },
            {
              "name": "csharp_namespace",
              "number": 37,
              "label": "LABEL_OPTIONAL",
              "type": "TYPE_STRING",
              "jsonName": "csharpNamespace"
            },
            {
              "name": "swift_prefix",
              "number": 39,
              "label": "LABEL_OPTIONAL",
              "type": "TYPE_STRING",
              "jsonName": "swiftPrefix"
            },
            {
              "name": "php_class_prefix",
              "number": 40,
              "label": "LABEL_OPTIONAL",
              "type": "TYPE_STRING",
              "jsonName": "phpClassPrefix"
            },
            {
              "name": "php_namespace",
              "number": 41,
              "label": "LABEL_OPTIONAL",
              "type": "TYPE_STRING",
              "jsonName": "phpNamespace"
            },
            {
              "name": "php_metadata_namespace",
              "number": 44,
              "label": "LABEL_OPTIONAL",
              "type": "TYPE_STRING",
              "jsonName": "phpMetadataNamespace"
            },
            {
              "name": "ruby_package",
              "number": 45,
              "label": "LABEL_OPTIONAL",
              "type": "TYPE_STRING",
              "jsonName": "rubyPackage"
            },
            {
              "name": "uninterpreted_option",
              "number": 999,
              "label": "LABEL_REPEATED",
              "type": "TYPE_MESSAGE",
              "typeName": ".google.protobuf.UninterpretedOption",
              "jsonName": "uninterpretedOption"
            }
          ],
          "enumType": [
            {
              "name": "OptimizeMode",
              "value": [
                {
                  "name": "SPEED",
                  "number": 1
                },
                {
                  "name": "CODE_SIZE",
                  "number": 2
                },
                {
                  "name": "LITE_RUNTIME",
                  "number": 3
                }
              ]
            }
          ],
          "extensionRange": [
            {
              "start": 1000,
              "end": 536870912
            }
          ],
          "reservedRange": [
            {
              "start": 38,
              "end": 39
            }
          ]
        },
        {
          "name": "MessageOptions",
          "field": [
            {
              "name": "message_set_wire_format",
              "number": 1,
              "label": "LABEL_OPTIONAL",
              "type": "TYPE_BOOL",
              "defaultValue": "false",
              "jsonName": "messageSetWireFormat"
            },
            {
              "name": "no_standard_descriptor_accessor",
              "number": 2,
              "label": "LABEL_OPTIONAL",
              "type": "TYPE_BOOL",
              "defaultValue": "false",
              "jsonName": "noStandardDescriptorAccessor"
            },
            {
              "name": "deprecated",
              "number": 3,
              "label": "LABEL_OPTIONAL",
              "type": "TYPE_BOOL",
              "defaultValue": "false",
              "jsonName": "deprecated"
            },
            {
              "name": "map_entry",
              "number": 7,
              "label": "LABEL_OPTIONAL",
              "type": "TYPE_BOOL",
              "jsonName": "mapEntry"
            },
            {
              "name": "uninterpreted_option",
              "number": 999,
              "label": "LABEL_REPEATED",
              "type": "TYPE_MESSAGE",
              "typeName": ".google.protobuf.UninterpretedOption",
              "jsonName": "uninterpretedOption"
            }
          ],
          "extensionRange": [
            {
              "start": 1000,
              "end": 536870912
            }
          ],
          "reservedRange": [
            {
              "start": 8,
              "end": 9
            },
            {
              "start": 9,
              "end": 10
            }
          ]
        },
        {
          "name": "FieldOptions",
          "field": [
            {
              "name": "ctype",
              "number": 1,
              "label": "LABEL_OPTIONAL",
              "type": "TYPE_ENUM",
              "typeName": ".google.protobuf.FieldOptions.CType",
              "defaultValue": "STRING",
              "jsonName": "ctype"
            },
            {
              "name": "packed",
              "number": 2,
              "label": "LABEL_OPTIONAL",
              "type": "TYPE_BOOL",
              "jsonName": "packed"
            },
            {
              "name": "jstype",
              "number": 6,
              "label": "LABEL_OPTIONAL",
              "type": "TYPE_ENUM",
              "typeName": ".google.protobuf.FieldOptions.JSType",
              "defaultValue": "JS_NORMAL",
              "jsonName": "jstype"
            },
            {
              "name": "lazy",
              "number": 5,
              "label": "LABEL_OPTIONAL",
              "type": "TYPE_BOOL",
              "defaultValue": "false",
              "jsonName": "lazy"
            },
            {
              "name": "deprecated",
              "number": 3,
              "label": "LABEL_OPTIONAL",
              "type": "TYPE_BOOL",
              "defaultValue": "false",
              "jsonName": "deprecated"
            },
            {
              "name": "weak",
              "number": 10,
              "label": "LABEL_OPTIONAL",
              "type": "TYPE_BOOL",
              "defaultValue": "false",
              "jsonName": "weak"
            },
            {
              "name": "uninterpreted_option",
              "number": 999,
              "label": "LABEL_REPEATED",
              "type": "TYPE_MESSAGE",
              "typeName": ".google.protobuf.UninterpretedOption",
              "jsonName": "uninterpretedOption"
            }
          ],
          "enumType": [
            {
              "name": "CType",
              "value": [
                {
                  "name": "STRING",
                  "number": 0
                },
                {
                  "name": "CORD",
                  "number": 1
                },
                {
                  "name": "STRING_PIECE",
                  "number": 2
                }
              ]
            },
            {
              "name": "JSType",
              "value": [
                {
                  "name": "JS_NORMAL",
                  "number": 0
                },
                {
                  "name": "JS_STRING",
                  "number": 1
                },
                {
                  "name": "JS_NUMBER",
                  "number": 2
                }
              ]
            }
          ],
          "extensionRange": [
            {
              "start": 1000,
              "end": 536870912
            }
          ],
          "reservedRange": [
            {
              "start": 4,
              "end": 5
            }
          ]
        },
        {
          "name": "OneofOptions",
          "field": [
            {
              "name": "uninterpreted_option",
              "number": 999,
              "label": "LABEL_REPEATED",
              "type": "TYPE_MESSAGE",
              "typeName": ".google.protobuf.UninterpretedOption",
              "jsonName": "uninterpretedOption"
            }
          ],
          "extensionRange": [
            {
              "start": 1000,
              "end": 536870912
            }
          ]
        },
        {
          "name": "EnumOptions",
          "field": [
            {
              "name": "allow_alias",
              "number": 2,
              "label": "LABEL_OPTIONAL",
              "type": "TYPE_BOOL",
              "jsonName": "allowAlias"
            },
            {
              "name": "deprecated",
              "number": 3,
              "label": "LABEL_OPTIONAL",
              "type": "TYPE_BOOL",
              "defaultValue": "false",
              "jsonName": "deprecated"
            },
            {
              "name": "uninterpreted_option",
              "number": 999,
              "label": "LABEL_REPEATED",
              "type": "TYPE_MESSAGE",
              "typeName": ".google.protobuf.UninterpretedOption",
              "jsonName": "uninterpretedOption"
            }
          ],
          "extensionRange": [
            {
              "start": 1000,
              "end": 536870912
            }
          ],
          "reservedRange": [
            {
              "start": 5,
              "end": 6
            }
          ]
        },
        {
          "name": "EnumValueOptions",
          "field": [
            {
              "name": "deprecated",
              "number": 1,
              "label": "LABEL_OPTIONAL",
              "type": "TYPE_BOOL",
              "defaultValue": "false",
              "jsonName": "deprecated"
            },
            {
              "name": "uninterpreted_option",
              "number": 999,
              "label": "LABEL_REPEATED",
              "type": "TYPE_MESSAGE",
              "typeName": ".google.protobuf.UninterpretedOption",
              "jsonName": "uninterpretedOption"
            }
          ],
          "extensionRange": [
            {
              "start": 1000,
              "end": 536870912
            }
          ]
        },
        {
          "name": "ServiceOptions",
          "field": [
            {
              "name": "deprecated",
              "number": 33,
              "label": "LABEL_OPTIONAL",
              "type": "TYPE_BOOL",
              "defaultValue": "false",
              "jsonName": "deprecated"
            },
            {
              "name": "uninterpreted_option",
              "number": 999,
              "label": "LABEL_REPEATED",
              "type": "TYPE_MESSAGE",
              "typeName": ".google.protobuf.UninterpretedOption",
              "jsonName": "uninterpretedOption"
            }
          ],
          "extensionRange": [
            {
              "start": 1000,
              "end": 536870912
            }
          ]
        },
        {
          "name": "MethodOptions",
          "field": [
            {
              "name": "deprecated",
              "number": 33,
              "label": "LABEL_OPTIONAL",
              "type": "TYPE_BOOL",
              "defaultValue": "false",
              "jsonName": "deprecated"
            },
            {
              "name": "idempotency_level",
              "number": 34,
              "label": "LABEL_OPTIONAL",
              "type": "TYPE_ENUM",
              "typeName": ".google.protobuf.MethodOptions.IdempotencyLevel",
              "defaultValue": "IDEMPOTENCY_UNKNOWN",
              "jsonName": "idempotencyLevel"
            },
            {
              "name": "uninterpreted_option",
              "number": 999,
              "label": "LABEL_REPEATED",
              "type": "TYPE_MESSAGE",
              "typeName": ".google.protobuf.UninterpretedOption",
              "jsonName": "uninterpretedOption"
            }
          ],
          "enumType": [
            {
              "name": "IdempotencyLevel",
              "value": [
                {
                  "name": "IDEMPOTENCY_UNKNOWN",
                  "number": 0
                },
                {
                  "name": "NO_SIDE_EFFECTS",
                  "number": 1
                },
                {
                  "name": "IDEMPOTENT",
                  "number": 2
                }
              ]
            }
          ],
          "extensionRange": [
            {
              "start": 1000,
              "end": 536870912
            }
          ]
        },
        {
          "name": "UninterpretedOption",
          "field": [
            {
              "name": "name",
              "number": 2,
              "label": "LABEL_REPEATED",
              "type": "TYPE_MESSAGE",
              "typeName": ".google.protobuf.UninterpretedOption.NamePart",
              "jsonName": "name"
            },
            {
              "name": "identifier_value",
              "number": 3,
              "label": "LABEL_OPTIONAL",
              "type": "TYPE_STRING",
              "jsonName": "identifierValue"
            },
            {
              "name": "positive_int_value",
              "number": 4,
              "label": "LABEL_OPTIONAL",
              "type": "TYPE_UINT64",
              "jsonName": "positiveIntValue"
            },
            {
              "name": "negative_int_value",
              "number": 5,
              "label": "LABEL_OPTIONAL",
              "type": "TYPE_INT64",
              "jsonName": "negativeIntValue"
            },
            {
              "name": "double_value",
              "number": 6,
              "label": "LABEL_OPTIONAL",
              "type": "TYPE_DOUBLE",
              "jsonName": "doubleValue"
            },
            {
              "name": "string_value",
              "number": 7,
              "label": "LABEL_OPTIONAL",
              "type": "TYPE_BYTES",
              "jsonName": "stringValue"
            },
            {
              "name": "aggregate_value",
              "number": 8,
              "label": "LABEL_OPTIONAL",
              "type": "TYPE_STRING",
              "jsonName": "aggregateValue"
            }
          ],
          "nestedType": [
            {
              "name": "NamePart",
              "field": [
                {
                  "name": "name_part",
                  "number": 1,
                  "label": "LABEL_REQUIRED",
                  "type": "TYPE_STRING",
                  "jsonName": "namePart"
                },
                {
                  "name": "is_extension",
                  "number": 2,
                  "label": "LABEL_REQUIRED",
                  "type": "TYPE_BOOL",
                  "jsonName": "isExtension"
                }
              ]
            }
          ]
        },
        {
          "name": "SourceCodeInfo",
          "field": [
            {
              "name": "location",
              "number": 1,
              "label": "LABEL_REPEATED",
              "type": "TYPE_MESSAGE",
              "typeName": ".google.protobuf.SourceCodeInfo.Location",
              "jsonName": "location"
            }
          ],
          "nestedType": [
            {
              "name": "Location",
              "field": [
                {
                  "name": "path",
                  "number": 1,
                  "label": "LABEL_REPEATED",
                  "type": "TYPE_INT32",
                  "jsonName": "path",
                  "options": {
                    "packed": true
                  }
                },
                {
                  "name": "span",
                  "number": 2,
                  "label": "LABEL_REPEATED",
                  "type": "TYPE_INT32",
                  "jsonName": "span",
                  "options": {
                    "packed": true
                  }
                },
                {
                  "name": "leading_comments",
                  "number": 3,
                  "label": "LABEL_OPTIONAL",
                  "type": "TYPE_STRING",
                  "jsonName": "leadingComments"
                },
                {
                  "name": "trailing_comments",
                  "number": 4,
                  "label": "LABEL_OPTIONAL",
                  "type": "TYPE_STRING",
                  "jsonName": "trailingComments"
                },
                {
                  "name": "leading_detached_comments",
                  "number": 6,
                  "label": "LABEL_REPEATED",
                  "type": "TYPE_STRING",
                  "jsonName": "leadingDetachedComments"
                }
              ]
            }
          ]
        },
        {
          "name": "GeneratedCodeInfo",
          "field": [
            {
              "name": "annotation",
              "number": 1,
              "label": "LABEL_REPEATED",
              "type": "TYPE_MESSAGE",
              "typeName": ".google.protobuf.GeneratedCodeInfo.Annotation",
              "jsonName": "annotation"
            }
          ],
          "nestedType": [
            {
              "name": "Annotation",
              "field": [
                {
                  "name": "path",
                  "number": 1,
                  "label": "LABEL_REPEATED",
                  "type": "TYPE_INT32",
                  "jsonName": "path",
                  "options": {
                    "packed": true
                  }
                },
                {
                  "name": "source_file",
                  "number": 2,
                  "label": "LABEL_OPTIONAL",
                  "type": "TYPE_STRING",
                  "jsonName": "sourceFile"
                },
                {
                  "name": "begin",
                  "number": 3,
                  "label": "LABEL_OPTIONAL",
                  "type": "TYPE_INT32",
                  "jsonName": "begin"
                },
                {
                  "name": "end",
                  "number": 4,
                  "label": "LABEL_OPTIONAL",
                  "type": "TYPE_INT32",
                  "jsonName": "end"
                }
              ]
            }
          ]
        }
      ],
      "options": {
        "javaPackage": "com.google.protobuf",
        "javaOuterClassname": "DescriptorProtos",
        "optimizeFor": "SPEED",
        "goPackage": "github.com/golang/protobuf/protoc-gen-go/descriptor;descriptor",
        "ccEnableArenas": true,
        "objcClassPrefix": "GPB",
        "csharpNamespace": "Google.Protobuf.Reflection"
      },
      "sourceCodeInfo": {
        "location": [
          {
            "span": [
              39,
              0,
              884,
              1
            ]
          },
          {
            "path": [
              12
            ],
            "span": [
              39,
              0,
              18
            ],
            "leadingDetachedComments": [
              " Protocol Buffers - Google's data interchange format\n Copyright 2008 Google Inc.  All rights reserved.\n https://developers.google.com/protocol-buffers/\n\n Redistribution and use in source and binary forms, with or without\n modification, are permitted provided that the following conditions are\n met:\n\n     * Redistributions of source code must retain the above copyright\n notice, this list of conditions and the following disclaimer.\n     * Redistributions in binary form must reproduce the above\n copyright notice, this list of conditions and the following disclaimer\n in the documentation and/or other materials provided with the\n distribution.\n     * Neither the name of Google Inc. nor the names of its\n contributors may be used to endorse or promote products derived from\n this software without specific prior written permission.\n\n THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n",
              " Author: kenton@google.com (Kenton Varda)\n  Based on original Protocol Buffers design by\n  Sanjay Ghemawat, Jeff Dean, and others.\n\n The messages in this file describe the definitions found in .proto files.\n A valid .proto file can be translated directly to a FileDescriptorProto\n without any other information (e.g. without reading its imports).\n"
            ]
          },
          {
            "path": [
              2
            ],
            "span": [
              41,
              0,
              24
            ]
          },
          {
            "path": [
              8
            ],
            "span": [
              43,
              0,
              85
            ]
          },
          {
            "path": [
              8,
              11
            ],
            "span": [
              43,
              0,
              85
            ]
          },
          {
            "path": [
              8
            ],
            "span": [
              44,
              0,
              44
            ]
          },
          {
            "path": [
              8,
              1
            ],
            "span": [
              44,
              0,
              44
            ]
          },
          {
            "path": [
              8
            ],
            "span": [
              45,
              0,
              49
            ]
          },
          {
            "path": [
              8,
              8
            ],
            "span": [
              45,
              0,
              49
            ]
          },
          {
            "path": [
              8
            ],
            "span": [
              46,
              0,
              55
            ]
          },
          {
            "path": [
              8,
              37
            ],
            "span": [
              46,
              0,
              55
            ]
          },
          {
            "path": [
              8
            ],
            "span": [
              47,
              0,
              33
            ]
          },
          {
            "path": [
              8,
              36
            ],
            "span": [
              47,
              0,
              33
            ]
          },
          {
            "path": [
              8
            ],
            "span": [
              48,
              0,
              31
            ]
          },
          {
            "path": [
              8,
              31
            ],
            "span": [
              48,
              0,
              31
            ]
          },
          {
            "path": [
              8
            ],
            "span": [
              52,
              0,
              28
            ]
          },
          {
            "path": [
              8,
              9
            ],
            "span": [
              52,
              0,
              28
            ],
            "leadingComments": " descriptor.proto must be optimized for speed because reflection-based\n algorithms don't work during bootstrapping.\n"
          },
          {
            "path": [
              4,
              0
            ],
            "span": [
              56,
              0,
              58,
              1
            ],
            "leadingComments": " The protocol compiler can output a FileDescriptorSet containing the .proto\n files it parses.\n"
          },
          {
            "path": [
              4,
              0,
              1
            ],
            "span": [
              56,
              8,
              25
            ]
          },
          {
            "path": [
              4,
              0,
              2,
              0
            ],
            "span": [
              57,
              2,
              40
            ]
          },
          {
            "path": [
              4,
              0,
              2,
              0,
              4
            ],
            "span": [
              57,
              2,
              10
            ]
          },
          {
            "path": [
              4,
              0,
              2,
              0,
              6
            ],
            "span": [
              57,
              11,
              30
            ]
          },
          {
            "path": [
              4,
              0,
              2,
              0,
              1
            ],
            "span": [
              57,
              31,
              35
            ]
          },
          {
            "path": [
              4,
              0,
              2,
              0,
              3
            ],
            "span": [
              57,
              38,
              39
            ]
          },
          {
            "path": [
              4,
              1
            ],
            "span": [
              61,
              0,
              90,
              1
            ],
            "leadingComments": " Describes a complete .proto file.\n"
          },
          {
            "path": [
              4,
              1,
              1
            ],
            "span": [
              61,
              8,
              27
            ]
          },
          {
            "path": [
              4,
              1,
              2,
              0
            ],
            "span": [
              62,
              2,
              27
            ],
            "trailingComments": " file name, relative to root of source tree\n"
          },
          {
            "path": [
              4,
              1,
              2,
              0,
              4
            ],
            "span": [
              62,
              2,
              10
            ]
          },
          {
            "path": [
              4,
              1,
              2,
              0,
              5
            ],
            "span": [
              62,
              11,
              17
            ]
          },
          {
            "path": [
              4,
              1,
              2,
              0,
              1
            ],
            "span": [
              62,
              18,
              22
            ]
          },
          {
            "path": [
              4,
              1,
              2,
              0,
              3
            ],
            "span": [
              62,
              25,
              26
            ]
          },
          {
            "path": [
              4,
              1,
              2,
              1
            ],
            "span": [
              63,
              2,
              30
            ],
            "trailingComments": " e.g. \"foo\", \"foo.bar\", etc.\n"
          },
          {
            "path": [
              4,
              1,
              2,
              1,
              4
            ],
            "span": [
              63,
              2,
              10
            ]
          },
          {
            "path": [
              4,
              1,
              2,
              1,
              5
            ],
            "span": [
              63,
              11,
              17
            ]
          },
          {
            "path": [
              4,
              1,
              2,
              1,
              1
            ],
            "span": [
              63,
              18,
              25
            ]
          },
          {
            "path": [
              4,
              1,
              2,
              1,
              3
            ],
            "span": [
              63,
              28,
              29
            ]
          },
          {
            "path": [
              4,
              1,
              2,
              2
            ],
            "span": [
              66,
              2,
              33
            ],
            "leadingComments": " Names of files imported by this file.\n"
          },
          {
            "path": [
              4,
              1,
              2,
              2,
              4
            ],
            "span": [
              66,
              2,
              10
            ]
          },
          {
            "path": [
              4,
              1,
              2,
              2,
              5
            ],
            "span": [
              66,
              11,
              17
            ]
          },
          {
            "path": [
              4,
              1,
              2,
              2,
              1
            ],
            "span": [
              66,
              18,
              28
            ]
          },
          {
            "path": [
              4,
              1,
              2,
              2,
              3
            ],
            "span": [
              66,
              31,
              32
            ]
          },
          {
            "path": [
              4,
              1,
              2,
              3
            ],
            "span": [
              68,
              2,
              40
            ],
            "leadingComments": " Indexes of the public imported files in the dependency list above.\n"
          },
          {
            "path": [
              4,
              1,
              2,
              3,
              4
            ],
            "span": [
              68,
              2,
              10
            ]
          },
          {
            "path": [
              4,
              1,
              2,
              3,
              5
            ],
            "span": [
              68,
              11,
              16
            ]
          },
          {
            "path": [
              4,
              1,
              2,
              3,
              1
            ],
            "span": [
              68,
              17,
              34
            ]
          },
          {
            "path": [
              4,
              1,
              2,
              3,
              3
            ],
            "span": [
              68,
              37,
              39
            ]
          },
          {
            "path": [
              4,
              1,
              2,
              4
            ],
            "span": [
              71,
              2,
              38
            ],
            "leadingComments": " Indexes of the weak imported files in the dependency list.\n For Google-internal migration only. Do not use.\n"
          },
          {
            "path": [
              4,
              1,
              2,
              4,
              4
            ],
            "span": [
              71,
              2,
              10
            ]
          },
          {
            "path": [
              4,
              1,
              2,
              4,
              5
            ],
            "span": [
              71,
              11,
              16
            ]
          },
          {
            "path": [
              4,
              1,
              2,
              4,
              1
            ],
            "span": [
              71,
              17,
              32
            ]
          },
          {
            "path": [
              4,
              1,
              2,
              4,
              3
            ],
            "span": [
              71,
              35,
              37
            ]
          },
          {
            "path": [
              4,
              1,
              2,
              5
            ],
            "span": [
              74,
              2,
              44
            ],
            "leadingComments": " All top-level definitions in this file.\n"
          },
          {
            "path": [
              4,
              1,
              2,
              5,
              4
            ],
            "span": [
              74,
              2,
              10
            ]
          },
          {
            "path": [
              4,
              1,
              2,
              5,
              6
            ],
            "span": [
              74,
              11,
              26
            ]
          },
          {
            "path": [
              4,
              1,
              2,
              5,
              1
            ],
            "span": [
              74,
              27,
              39
            ]
          },
          {
            "path": [
              4,
              1,
              2,
              5,
              3
            ],
            "span": [
              74,
              42,
              43
            ]
          },
          {
            "path": [
              4,
              1,
              2,
              6
            ],
            "span": [
              75,
              2,
              45
            ]
          },
          {
            "path": [
              4,
              1,
              2,
              6,
              4
            ],
            "span": [
              75,
              2,
              10
            ]
          },
          {
            "path": [
              4,
              1,
              2,
              6,
              6
            ],
            "span": [
              75,
              11,
              30
            ]
          },
          {
            "path": [
              4,
              1,
              2,
              6,
              1
            ],
            "span": [
              75,
              31,
              40
            ]
          },
          {
            "path": [
              4,
              1,
              2,
              6,
              3
            ],
            "span": [
              75,
              43,
              44
            ]
          },
          {
            "path": [
              4,
              1,
              2,
              7
            ],
            "span": [
              76,
              2,
              46
            ]
          },
          {
            "path": [
              4,
              1,
              2,
              7,
              4
            ],
            "span": [
              76,
              2,
              10
            ]
          },
          {
            "path": [
              4,
              1,
              2,
              7,
              6
            ],
            "span": [
              76,
              11,
              33
            ]
          },
          {
            "path": [
              4,
              1,
              2,
              7,
              1
            ],
            "span": [
              76,
              34,
              41
            ]
          },
          {
            "path": [
              4,
              1,
              2,
              7,
              3
            ],
            "span": [
              76,
              44,
              45
            ]
          },
          {
            "path": [
              4,
              1,
              2,
              8
            ],
            "span": [
              77,
              2,
              46
            ]
          },
          {
            "path": [
              4,
              1,
              2,
              8,
              4
            ],
            "span": [
              77,
              2,
              10
            ]
          },
          {
            "path": [
              4,
              1,
              2,
              8,
              6
            ],
            "span": [
              77,
              11,
              31
            ]
          },
          {
            "path": [
              4,
              1,
              2,
              8,
              1
            ],
            "span": [
              77,
              32,
              41
            ]
          },
          {
            "path": [
              4,
              1,
              2,
              8,
              3
            ],
            "span": [
              77,
              44,
              45
            ]
          },
          {
            "path": [
              4,
              1,
              2,
              9
            ],
            "span": [
              79,
              2,
              35
            ]
          },
          {
            "path": [
              4,
              1,
              2,
              9,
              4
            ],
            "span": [
              79,
              2,
              10
            ]
          },
          {
            "path": [
              4,
              1,
              2,
              9,
              6
            ],
            "span": [
              79,
              11,
              22
            ]
          },
          {
            "path": [
              4,
              1,
              2,
              9,
              1
            ],
            "span": [
              79,
              23,
              30
            ]
          },
          {
            "path": [
              4,
              1,
              2,
              9,
              3
            ],
            "span": [
              79,
              33,
              34
            ]
          },
          {
            "path": [
              4,
              1,
              2,
              10
            ],
            "span": [
              85,
              2,
              47
            ],
            "leadingComments": " This field contains optional information about the original source code.\n You may safely remove this entire field without harming runtime\n functionality of the descriptors -- the information is needed only by\n development tools.\n"
          },
          {
            "path": [
              4,
              1,
              2,
              10,
              4
            ],
            "span": [
              85,
              2,
              10
            ]
          },
          {
            "path": [
              4,
              1,
              2,
              10,
              6
            ],
            "span": [
              85,
              11,
              25
            ]
          },
          {
            "path": [
              4,
              1,
              2,
              10,
              1
            ],
            "span": [
              85,
              26,
              42
            ]
          },
          {
            "path": [
              4,
              1,
              2,
              10,
              3
            ],
            "span": [
              85,
              45,
              46
            ]
          },
          {
            "path": [
              4,
              1,
              2,
              11
            ],
            "span": [
              89,
              2,
              30
            ],
            "leadingComments": " The syntax of the proto file.\n The supported values are \"proto2\" and \"proto3\".\n"
          },
          {
            "path": [
              4,
              1,
              2,
              11,
              4
            ],
            "span": [
              89,
              2,
              10
            ]
          },
          {
            "path": [
              4,
              1,
              2,
              11,
              5
            ],
            "span": [
              89,
              11,
              17
            ]
          },
          {
            "path": [
              4,
              1,
              2,
              11,
              1
            ],
            "span": [
              89,
              18,
              24
            ]
          },
          {
            "path": [
              4,
              1,
              2,
              11,
              3
            ],
            "span": [
              89,
              27,
              29
            ]
          },
          {
            "path": [
              4,
              2
            ],
            "span": [
              93,
              0,
              125,
              1
            ],
            "leadingComments": " Describes a message type.\n"
          },
          {
            "path": [
              4,
              2,
              1
            ],
            "span": [
              93,
              8,
              23
            ]
          },
          {
            "path": [
              4,
              2,
              2,
              0
            ],
            "span": [
              94,
              2,
              27
            ]
          },
          {
            "path": [
              4,
              2,
              2,
              0,
              4
            ],
            "span": [
              94,
              2,
              10
            ]
          },
          {
            "path": [
              4,
              2,
              2,
              0,
              5
            ],
            "span": [
              94,
              11,
              17
            ]
          },
          {
            "path": [
              4,
              2,
              2,
              0,
              1
            ],
            "span": [
              94,
              18,
              22
            ]
          },
          {
            "path": [
              4,
              2,
              2,
              0,
              3
            ],
            "span": [
              94,
              25,
              26
            ]
          },
          {
            "path": [
              4,
              2,
              2,
              1
            ],
            "span": [
              96,
              2,
              42
            ]
          },
          {
            "path": [
              4,
              2,
              2,
              1,
              4
            ],
            "span": [
              96,
              2,
              10
            ]
          },
          {
            "path": [
              4,
              2,
              2,
              1,
              6
            ],
            "span": [
              96,
              11,
              31
            ]
          },
          {
            "path": [
              4,
              2,
              2,
              1,
              1
            ],
            "span": [
              96,
              32,
              37
            ]
          },
          {
            "path": [
              4,
              2,
              2,
              1,
              3
            ],
            "span": [
              96,
              40,
              41
            ]
          },
          {
            "path": [
              4,
              2,
              2,
              2
            ],
            "span": [
              97,
              2,
              46
            ]
          },
          {
            "path": [
              4,
              2,
              2,
              2,
              4
            ],
            "span": [
              97,
              2,
              10
            ]
          },
          {
            "path": [
              4,
              2,
              2,
              2,
              6
            ],
            "span": [
              97,
              11,
              31
            ]
          },
          {
            "path": [
              4,
              2,
              2,
              2,
              1
            ],
            "span": [
              97,
              32,
              41
            ]
          },
          {
            "path": [
              4,
              2,
              2,
              2,
              3
            ],
            "span": [
              97,
              44,
              45
            ]
          },
          {
            "path": [
              4,
              2,
              2,
              3
            ],
            "span": [
              99,
              2,
              43
            ]
          },
          {
            "path": [
              4,
              2,
              2,
              3,
              4
            ],
            "span": [
              99,
              2,
              10
            ]
          },
          {
            "path": [
              4,
              2,
              2,
              3,
              6
            ],
            "span": [
              99,
              11,
              26
            ]
          },
          {
            "path": [
              4,
              2,
              2,
              3,
              1
            ],
            "span": [
              99,
              27,
              38
            ]
          },
          {
            "path": [
              4,
              2,
              2,
              3,
              3
            ],
            "span": [
              99,
              41,
              42
            ]
          },
          {
            "path": [
              4,
              2,
              2,
              4
            ],
            "span": [
              100,
              2,
              45
            ]
          },
          {
            "path": [
              4,
              2,
              2,
              4,
              4
            ],
            "span": [
              100,
              2,
              10
            ]
          },
          {
            "path": [
              4,
              2,
              2,
              4,
              6
            ],
            "span": [
              100,
              11,
              30
            ]
          },
          {
            "path": [
              4,
              2,
              2,
              4,
              1
            ],
            "span": [
              100,
              31,
              40
            ]
          },
          {
            "path": [
              4,
              2,
              2,
              4,
              3
            ],
            "span": [
              100,
              43,
              44
            ]
          },
          {
            "path": [
              4,
              2,
              3,
              0
            ],
            "span": [
              102,
              2,
              107,
              3
            ]
          },
          {
            "path": [
              4,
              2,
              3,
              0,
              1
            ],
            "span": [
              102,
              10,
              24
            ]
          },
          {
            "path": [
              4,
              2,
              3,
              0,
              2,
              0
            ],
            "span": [
              103,
              4,
              29
            ],
            "trailingComments": " Inclusive.\n"
          },
          {
            "path": [
              4,
              2,
              3,
              0,
              2,
              0,
              4
            ],
            "span": [
              103,
              4,
              12
            ]
          },
          {
            "path": [
              4,
              2,
              3,
              0,
              2,
              0,
              5
            ],
            "span": [
              103,
              13,
              18
            ]
          },
          {
            "path": [
              4,
              2,
              3,
              0,
              2,
              0,
              1
            ],
            "span": [
              103,
              19,
              24
            ]
          },
          {
            "path": [
              4,
              2,
              3,
              0,
              2,
              0,
              3
            ],
            "span": [
              103,
              27,
              28
            ]
          },
          {
            "path": [
              4,
              2,
              3,
              0,
              2,
              1
            ],
            "span": [
              104,
              4,
              27
            ],
            "trailingComments": " Exclusive.\n"
          },
          {
            "path": [
              4,
              2,
              3,
              0,
              2,
              1,
              4
            ],
            "span": [
              104,
              4,
              12
            ]
          },
          {
            "path": [
              4,
              2,
              3,
              0,
              2,
              1,
              5
            ],
            "span": [
              104,
              13,
              18
            ]
          },
          {
            "path": [
              4,
              2,
              3,
              0,
              2,
              1,
              1
            ],
            "span": [
              104,
              19,
              22
            ]
          },
          {
            "path": [
              4,
              2,
              3,
              0,
              2,
              1,
              3
            ],
            "span": [
              104,
              25,
              26
            ]
          },
          {
            "path": [
              4,
              2,
              3,
              0,
              2,
              2
            ],
            "span": [
              106,
              4,
              47
            ]
          },
          {
            "path": [
              4,
              2,
              3,
              0,
              2,
              2,
              4
            ],
            "span": [
              106,
              4,
              12
            ]
          },
          {
            "path": [
              4,
              2,
              3,
              0,
              2,
              2,
              6
            ],
            "span": [
              106,
              13,
              34
            ]
          },
          {
            "path": [
              4,
              2,
              3,
              0,
              2,
              2,
              1
            ],
            "span": [
              106,
              35,
              42
            ]
          },
          {
            "path": [
              4,
              2,
              3,
              0,
              2,
              2,
              3
            ],
            "span": [
              106,
              45,
              46
            ]
          },
          {
            "path": [
              4,
              2,
              2,
              5
            ],
            "span": [
              108,
              2,
              46
            ]
          },
          {
            "path": [
              4,
              2,
              2,
              5,
              4
            ],
            "span": [
              108,
              2,
              10
            ]
          },
          {
            "path": [
              4,
              2,
              2,
              5,
              6
            ],
            "span": [
              108,
              11,
              25
            ]
          },
          {
            "path": [
              4,
              2,
              2,
              5,
              1
            ],
            "span": [
              108,
              26,
              41
            ]
          },
          {
            "path": [
              4,
              2,
              2,
              5,
              3
            ],
            "span": [
              108,
              44,
              45
            ]
          },
          {
            "path": [
              4,
              2,
              2,
              6
            ],
            "span": [
              110,
              2,
              47
            ]
          },
          {
            "path": [
              4,
              2,
              2,
              6,
              4
            ],
            "span": [
              110,
              2,
              10
            ]
          },
          {
            "path": [
              4,
              2,
              2,
              6,
              6
            ],
            "span": [
              110,
              11,
              31
            ]
          },
          {
            "path": [
              4,
              2,
              2,
              6,
              1
            ],
            "span": [
              110,
              32,
              42
            ]
          },
          {
            "path": [
              4,
              2,
              2,
              6,
              3
            ],
            "span": [
              110,
              45,
              46
            ]
          },
          {
            "path": [
              4,
              2,
              2,
              7
            ],
            "span": [
              112,
              2,
              38
            ]
          },
          {
            "path": [
              4,
              2,
              2,
              7,
              4
            ],
            "span": [
              112,
              2,
              10
            ]
          },
          {
            "path": [
              4,
              2,
              2,
              7,
              6
            ],
            "span": [
              112,
              11,
              25
            ]
          },
          {
            "path": [
              4,
              2,
              2,
              7,
              1
            ],
            "span": [
              112,
              26,
              33
            ]
          },
          {
            "path": [
              4,
              2,
              2,
              7,
              3
            ],
            "span": [
              112,
              36,
              37
            ]
          },
          {
            "path": [
              4,
              2,
              3,
              1
            ],
            "span": [
              117,
              2,
              120,
              3
            ],
            "leadingComments": " Range of reserved tag numbers. Reserved tag numbers may not be used by\n fields or extension ranges in the same message. Reserved ranges may\n not overlap.\n"
          },
          {
            "path": [
              4,
              2,
              3,
              1,
              1
            ],
            "span": [
              117,
              10,
              23
            ]
          },
          {
            "path": [
              4,
              2,
              3,
              1,
              2,
              0
            ],
            "span": [
              118,
              4,
              29
            ],
            "trailingComments": " Inclusive.\n"
          },
          {
            "path": [
              4,
              2,
              3,
              1,
              2,
              0,
              4
            ],
            "span": [
              118,
              4,
              12
            ]
          },
          {
            "path": [
              4,
              2,
              3,
              1,
              2,
              0,
              5
            ],
            "span": [
              118,
              13,
              18
            ]
          },
          {
            "path": [
              4,
              2,
              3,
              1,
              2,
              0,
              1
            ],
            "span": [
              118,
              19,
              24
            ]
          },
          {
            "path": [
              4,
              2,
              3,
              1,
              2,
              0,
              3
            ],
            "span": [
              118,
              27,
              28
            ]
          },
          {
            "path": [
              4,
              2,
              3,
              1,
              2,
              1
            ],
            "span": [
              119,
              4,
              27
            ],
            "trailingComments": " Exclusive.\n"
          },
          {
            "path": [
              4,
              2,
              3,
              1,
              2,
              1,
              4
            ],
            "span": [
              119,
              4,
              12
            ]
          },
          {
            "path": [
              4,
              2,
              3,
              1,
              2,
              1,
              5
            ],
            "span": [
              119,
              13,
              18
            ]
          },
          {
            "path": [
              4,
              2,
              3,
              1,
              2,
              1,
              1
            ],
            "span": [
              119,
              19,
              22
            ]
          },
          {
            "path": [
              4,
              2,
              3,
              1,
              2,
              1,
              3
            ],
            "span": [
              119,
              25,
              26
            ]
          },
          {
            "path": [
              4,
              2,
              2,
              8
            ],
            "span": [
              121,
              2,
              44
            ]
          },
          {
            "path": [
              4,
              2,
              2,
              8,
              4
            ],
            "span": [
              121,
              2,
              10
            ]
          },
          {
            "path": [
              4,
              2,
              2,
              8,
              6
            ],
            "span": [
              121,
              11,
              24
            ]
          },
          {
            "path": [
              4,
              2,
              2,
              8,
              1
            ],
            "span": [
              121,
              25,
              39
            ]
          },
          {
            "path": [
              4,
              2,
              2,
              8,
              3
            ],
            "span": [
              121,
              42,
              43
            ]
          },
          {
            "path": [
              4,
              2,
              2,
              9
            ],
            "span": [
              124,
              2,
              37
            ],
            "leadingComments": " Reserved field names, which may not be used by fields in the same message.\n A given name may only be reserved once.\n"
          },
          {
            "path": [
              4,
              2,
              2,
              9,
              4
            ],
            "span": [
              124,
              2,
              10
            ]
          },
          {
            "path": [
              4,
              2,
              2,
              9,
              5
            ],
            "span": [
              124,
              11,
              17
            ]
          },
          {
            "path": [
              4,
              2,
              2,
              9,
              1
            ],
            "span": [
              124,
              18,
              31
            ]
          },
          {
            "path": [
              4,
              2,
              2,
              9,
              3
            ],
            "span": [
              124,
              34,
              36
            ]
          },
          {
            "path": [
              4,
              3
            ],
            "span": [
              127,
              0,
              133,
              1
            ]
          },
          {
            "path": [
              4,
              3,
              1
            ],
            "span": [
              127,
              8,
              29
            ]
          },
          {
            "path": [
              4,
              3,
              2,
              0
            ],
            "span": [
              129,
              2,
              58
            ],
            "leadingComments": " The parser stores options it doesn't recognize here. See above.\n"
          },
          {
            "path": [
              4,
              3,
              2,
              0,
              4
            ],
            "span": [
              129,
              2,
              10
            ]
          },
          {
            "path": [
              4,
              3,
              2,
              0,
              6
            ],
            "span": [
              129,
              11,
              30
            ]
          },
          {
            "path": [
              4,
              3,
              2,
              0,
              1
            ],
            "span": [
              129,
              31,
              51
            ]
          },
          {
            "path": [
              4,
              3,
              2,
              0,
              3
            ],
            "span": [
              129,
              54,
              57
            ]
          },
          {
            "path": [
              4,
              3,
              5
            ],
            "span": [
              132,
              2,
              25
            ],
            "leadingComments": " Clients can define custom options in extensions of this message. See above.\n"
          },
          {
            "path": [
              4,
              3,
              5,
              0
            ],
            "span": [
              132,
              13,
              24
            ]
          },
          {
            "path": [
              4,
              3,
              5,
              0,
              1
            ],
            "span": [
              132,
              13,
              17
            ]
          },
          {
            "path": [
              4,
              3,
              5,
              0,
              2
            ],
            "span": [
              132,
              21,
              24
            ]
          },
          {
            "path": [
              4,
              4
            ],
            "span": [
              136,
              0,
              214,
              1
            ],
            "leadingComments": " Describes a field within a message.\n"
          },
          {
            "path": [
              4,
              4,
              1
            ],
            "span": [
              136,
              8,
              28
            ]
          },
          {
            "path": [
              4,
              4,
              4,
              0
            ],
            "span": [
              137,
              2,
              168,
              3
            ]
          },
          {
            "path": [
              4,
              4,
              4,
              0,
              1
            ],
            "span": [
              137,
              7,
              11
            ]
          },
          {
            "path": [
              4,
              4,
              4,
              0,
              2,
              0
            ],
            "span": [
              140,
              4,
              20
            ],
            "leadingComments": " 0 is reserved for errors.\n Order is weird for historical reasons.\n"
          },
          {
            "path": [
              4,
              4,
              4,
              0,
              2,
              0,
              1
            ],
            "span": [
              140,
              4,
              15
            ]
          },
          {
            "path": [
              4,
              4,
              4,
              0,
              2,
              0,
              2
            ],
            "span": [
              140,
              18,
              19
            ]
          },
          {
            "path": [
              4,
              4,
              4,
              0,
              2,
              1
            ],
            "span": [
              141,
              4,
              19
            ]
          },
          {
            "path": [
              4,
              4,
              4,
              0,
              2,
              1,
              1
            ],
            "span": [
              141,
              4,
              14
            ]
          },
          {
            "path": [
              4,
              4,
              4,
              0,
              2,
              1,
              2
            ],
            "span": [
              141,
              17,
              18
            ]
          },
          {
            "path": [
              4,
              4,
              4,
              0,
              2,
              2
            ],
            "span": [
              144,
              4,
              19
            ],
            "leadingComments": " Not ZigZag encoded.  Negative numbers take 10 bytes.  Use TYPE_SINT64 if\n negative values are likely.\n"
          },
          {
            "path": [
              4,
              4,
              4,
              0,
              2,
              2,
              1
            ],
            "span": [
              144,
              4,
              14
            ]
          },
          {
            "path": [
              4,
              4,
              4,
              0,
              2,
              2,
              2
            ],
            "span": [
              144,
              17,
              18
            ]
          },
          {
            "path": [
              4,
              4,
              4,
              0,
              2,
              3
            ],
            "span": [
              145,
              4,
              20
            ]
          },
          {
            "path": [
              4,
              4,
              4,
              0,
              2,
              3,
              1
            ],
            "span": [
              145,
              4,
              15
            ]
          },
          {
            "path": [
              4,
              4,
              4,
              0,
              2,
              3,
              2
            ],
            "span": [
              145,
              18,
              19
            ]
          },
          {
            "path": [
              4,
              4,
              4,
              0,
              2,
              4
            ],
            "span": [
              148,
              4,
              19
            ],
            "leadingComments": " Not ZigZag encoded.  Negative numbers take 10 bytes.  Use TYPE_SINT32 if\n negative values are likely.\n"
          },
          {
            "path": [
              4,
              4,
              4,
              0,
              2,
              4,
              1
            ],
            "span": [
              148,
              4,
              14
            ]
          },
          {
            "path": [
              4,
              4,
              4,
              0,
              2,
              4,
              2
            ],
            "span": [
              148,
              17,
              18
            ]
          },
          {
            "path": [
              4,
              4,
              4,
              0,
              2,
              5
            ],
            "span": [
              149,
              4,
              21
            ]
          },
          {
            "path": [
              4,
              4,
              4,
              0,
              2,
              5,
              1
            ],
            "span": [
              149,
              4,
              16
            ]
          },
          {
            "path": [
              4,
              4,
              4,
              0,
              2,
              5,
              2
            ],
            "span": [
              149,
              19,
              20
            ]
          },
          {
            "path": [
              4,
              4,
              4,
              0,
              2,
              6
            ],
            "span": [
              150,
              4,
              21
            ]
          },
          {
            "path": [
              4,
              4,
              4,
              0,
              2,
              6,
              1
            ],
            "span": [
              150,
              4,
              16
            ]
          },
          {
            "path": [
              4,
              4,
              4,
              0,
              2,
              6,
              2
            ],
            "span": [
              150,
              19,
              20
            ]
          },
          {
            "path": [
              4,
              4,
              4,
              0,
              2,
              7
            ],
            "span": [
              151,
              4,
              18
            ]
          },
          {
            "path": [
              4,
              4,
              4,
              0,
              2,
              7,
              1
            ],
            "span": [
              151,
              4,
              13
            ]
          },
          {
            "path": [
              4,
              4,
              4,
              0,
              2,
              7,
              2
            ],
            "span": [
              151,
              16,
              17
            ]
          },
          {
            "path": [
              4,
              4,
              4,
              0,
              2,
              8
            ],
            "span": [
              152,
              4,
              20
            ]
          },
          {
            "path": [
              4,
              4,
              4,
              0,
              2,
              8,
              1
            ],
            "span": [
              152,
              4,
              15
            ]
          },
          {
            "path": [
              4,
              4,
              4,
              0,
              2,
              8,
              2
            ],
            "span": [
              152,
              18,
              19
            ]
          },
          {
            "path": [
              4,
              4,
              4,
              0,
              2,
              9
            ],
            "span": [
              157,
              4,
              20
            ],
            "leadingComments": " Tag-delimited aggregate.\n Group type is deprecated and not supported in proto3. However, Proto3\n implementations should still be able to parse the group wire format and\n treat group fields as unknown fields.\n"
          },
          {
            "path": [
              4,
              4,
              4,
              0,
              2,
              9,
              1
            ],
            "span": [
              157,
              4,
              14
            ]
          },
          {
            "path": [
              4,
              4,
              4,
              0,
              2,
              9,
              2
            ],
            "span": [
              157,
              17,
              19
            ]
          },
          {
            "path": [
              4,
              4,
              4,
              0,
              2,
              10
            ],
            "span": [
              158,
              4,
              22
            ],
            "trailingComments": " Length-delimited aggregate.\n"
          },
          {
            "path": [
              4,
              4,
              4,
              0,
              2,
              10,
              1
            ],
            "span": [
              158,
              4,
              16
            ]
          },
          {
            "path": [
              4,
              4,
              4,
              0,
              2,
              10,
              2
            ],
            "span": [
              158,
              19,
              21
            ]
          },
          {
            "path": [
              4,
              4,
              4,
              0,
              2,
              11
            ],
            "span": [
              161,
              4,
              20
            ],
            "leadingComments": " New in version 2.\n"
          },
          {
            "path": [
              4,
              4,
              4,
              0,
              2,
              11,
              1
            ],
            "span": [
              161,
              4,
              14
            ]
          },
          {
            "path": [
              4,
              4,
              4,
              0,
              2,
              11,
              2
            ],
            "span": [
              161,
              17,
              19
            ]
          },
          {
            "path": [
              4,
              4,
              4,
              0,
              2,
              12
            ],
            "span": [
              162,
              4,
              21
            ]
          },
          {
            "path": [
              4,
              4,
              4,
              0,
              2,
              12,
              1
            ],
            "span": [
              162,
              4,
              15
            ]
          },
          {
            "path": [
              4,
              4,
              4,
              0,
              2,
              12,
              2
            ],
            "span": [
              162,
              18,
              20
            ]
          },
          {
            "path": [
              4,
              4,
              4,
              0,
              2,
              13
            ],
            "span": [
              163,
              4,
              19
            ]
          },
          {
            "path": [
              4,
              4,
              4,
              0,
              2,
              13,
              1
            ],
            "span": [
              163,
              4,
              13
            ]
          },
          {
            "path": [
              4,
              4,
              4,
              0,
              2,
              13,
              2
            ],
            "span": [
              163,
              16,
              18
            ]
          },
          {
            "path": [
              4,
              4,
              4,
              0,
              2,
              14
            ],
            "span": [
              164,
              4,
              23
            ]
          },
          {
            "path": [
              4,
              4,
              4,
              0,
              2,
              14,
              1
            ],
            "span": [
              164,
              4,
              17
            ]
          },
          {
            "path": [
              4,
              4,
              4,
              0,
              2,
              14,
              2
            ],
            "span": [
              164,
              20,
              22
            ]
          },
          {
            "path": [
              4,
              4,
              4,
              0,
              2,
              15
            ],
            "span": [
              165,
              4,
              23
            ]
          },
          {
            "path": [
              4,
              4,
              4,
              0,
              2,
              15,
              1
            ],
            "span": [
              165,
              4,
              17
            ]
          },
          {
            "path": [
              4,
              4,
              4,
              0,
              2,
              15,
              2
            ],
            "span": [
              165,
              20,
              22
            ]
          },
          {
            "path": [
              4,
              4,
              4,
              0,
              2,
              16
            ],
            "span": [
              166,
              4,
              21
            ],
            "trailingComments": " Uses ZigZag encoding.\n"
          },
          {
            "path": [
              4,
              4,
              4,
              0,
              2,
              16,
              1
            ],
            "span": [
              166,
              4,
              15
            ]
          },
          {
            "path": [
              4,
              4,
              4,
              0,
              2,
              16,
              2
            ],
            "span": [
              166,
              18,
              20
            ]
          },
          {
            "path": [
              4,
              4,
              4,
              0,
              2,
              17
            ],
            "span": [
              167,
              4,
              21
            ],
            "trailingComments": " Uses ZigZag encoding.\n"
          },
          {
            "path": [
              4,
              4,
              4,
              0,
              2,
              17,
              1
            ],
            "span": [
              167,
              4,
              15
            ]
          },
          {
            "path": [
              4,
              4,
              4,
              0,
              2,
              17,
              2
            ],
            "span": [
              167,
              18,
              20
            ]
          },
          {
            "path": [
              4,
              4,
              4,
              1
            ],
            "span": [
              170,
              2,
              175,
              3
            ]
          },
          {
            "path": [
              4,
              4,
              4,
              1,
              1
            ],
            "span": [
              170,
              7,
              12
            ]
          },
          {
            "path": [
              4,
              4,
              4,
              1,
              2,
              0
            ],
            "span": [
              172,
              4,
              23
            ],
            "leadingComments": " 0 is reserved for errors\n"
          },
          {
            "path": [
              4,
              4,
              4,
              1,
              2,
              0,
              1
            ],
            "span": [
              172,
              4,
              18
            ]
          },
          {
            "path": [
              4,
              4,
              4,
              1,
              2,
              0,
              2
            ],
            "span": [
              172,
              21,
              22
            ]
          },
          {
            "path": [
              4,
              4,
              4,
              1,
              2,
              1
            ],
            "span": [
              173,
              4,
              23
            ]
          },
          {
            "path": [
              4,
              4,
              4,
              1,
              2,
              1,
              1
            ],
            "span": [
              173,
              4,
              18
            ]
          },
          {
            "path": [
              4,
              4,
              4,
              1,
              2,
              1,
              2
            ],
            "span": [
              173,
              21,
              22
            ]
          },
          {
            "path": [
              4,
              4,
              4,
              1,
              2,
              2
            ],
            "span": [
              174,
              4,
              23
            ]
          },
          {
            "path": [
              4,
              4,
              4,
              1,
              2,
              2,
              1
            ],
            "span": [
              174,
              4,
              18
            ]
          },
          {
            "path": [
              4,
              4,
              4,
              1,
              2,
              2,
              2
            ],
            "span": [
              174,
              21,
              22
            ]
          },
          {
            "path": [
              4,
              4,
              2,
              0
            ],
            "span": [
              177,
              2,
              27
            ]
          },
          {
            "path": [
              4,
              4,
              2,
              0,
              4
            ],
            "span": [
              177,
              2,
              10
            ]
          },
          {
            "path": [
              4,
              4,
              2,
              0,
              5
            ],
            "span": [
              177,
              11,
              17
            ]
          },
          {
            "path": [
              4,
              4,
              2,
              0,
              1
            ],
            "span": [
              177,
              18,
              22
            ]
          },
          {
            "path": [
              4,
              4,
              2,
              0,
              3
            ],
            "span": [
              177,
              25,
              26
            ]
          },
          {
            "path": [
              4,
              4,
              2,
              1
            ],
            "span": [
              178,
              2,
              28
            ]
          },
          {
            "path": [
              4,
              4,
              2,
              1,
              4
            ],
            "span": [
              178,
              2,
              10
            ]
          },
          {
            "path": [
              4,
              4,
              2,
              1,
              5
            ],
            "span": [
              178,
              11,
              16
            ]
          },
          {
            "path": [
              4,
              4,
              2,
              1,
              1
            ],
            "span": [
              178,
              17,
              23
            ]
          },
          {
            "path": [
              4,
              4,
              2,
              1,
              3
            ],
            "span": [
              178,
              26,
              27
            ]
          },
          {
            "path": [
              4,
              4,
              2,
              2
            ],
            "span": [
              179,
              2,
              27
            ]
          },
          {
            "path": [
              4,
              4,
              2,
              2,
              4
            ],
            "span": [
              179,
              2,
              10
            ]
          },
          {
            "path": [
              4,
              4,
              2,
              2,
              6
            ],
            "span": [
              179,
              11,
              16
            ]
          },
          {
            "path": [
              4,
              4,
              2,
              2,
              1
            ],
            "span": [
              179,
              17,
              22
            ]
          },
          {
            "path": [
              4,
              4,
              2,
              2,
              3
            ],
            "span": [
              179,
              25,
              26
            ]
          },
          {
            "path": [
              4,
              4,
              2,
              3
            ],
            "span": [
              183,
              2,
              25
            ],
            "leadingComments": " If type_name is set, this need not be set.  If both this and type_name\n are set, this must be one of TYPE_ENUM, TYPE_MESSAGE or TYPE_GROUP.\n"
          },
          {
            "path": [
              4,
              4,
              2,
              3,
              4
            ],
            "span": [
              183,
              2,
              10
            ]
          },
          {
            "path": [
              4,
              4,
              2,
              3,
              6
            ],
            "span": [
              183,
              11,
              15
            ]
          },
          {
            "path": [
              4,
              4,
              2,
              3,
              1
            ],
            "span": [
              183,
              16,
              20
            ]
          },
          {
            "path": [
              4,
              4,
              2,
              3,
              3
            ],
            "span": [
              183,
              23,
              24
            ]
          },
          {
            "path": [
              4,
              4,
              2,
              4
            ],
            "span": [
              190,
              2,
              32
            ],
            "leadingComments": " For message and enum types, this is the name of the type.  If the name\n starts with a '.', it is fully-qualified.  Otherwise, C++-like scoping\n rules are used to find the type (i.e. first the nested types within this\n message are searched, then within the parent, on up to the root\n namespace).\n"
          },
          {
            "path": [
              4,
              4,
              2,
              4,
              4
            ],
            "span": [
              190,
              2,
              10
            ]
          },
          {
            "path": [
              4,
              4,
              2,
              4,
              5
            ],
            "span": [
              190,
              11,
              17
            ]
          },
          {
            "path": [
              4,
              4,
              2,
              4,
              1
            ],
            "span": [
              190,
              18,
              27
            ]
          },
          {
            "path": [
              4,
              4,
              2,
              4,
              3
            ],
            "span": [
              190,
              30,
              31
            ]
          },
          {
            "path": [
              4,
              4,
              2,
              5
            ],
            "span": [
              194,
              2,
              31
            ],
            "leadingComments": " For extensions, this is the name of the type being extended.  It is\n resolved in the same manner as type_name.\n"
          },
          {
            "path": [
              4,
              4,
              2,
              5,
              4
            ],
            "span": [
              194,
              2,
              10
            ]
          },
          {
            "path": [
              4,
              4,
              2,
              5,
              5
            ],
            "span": [
              194,
              11,
              17
            ]
          },
          {
            "path": [
              4,
              4,
              2,
              5,
              1
            ],
            "span": [
              194,
              18,
              26
            ]
          },
          {
            "path": [
              4,
              4,
              2,
              5,
              3
            ],
            "span": [
              194,
              29,
              30
            ]
          },
          {
            "path": [
              4,
              4,
              2,
              6
            ],
            "span": [
              201,
              2,
              36
            ],
            "leadingComments": " For numeric types, contains the original text representation of the value.\n For booleans, \"true\" or \"false\".\n For strings, contains the default text contents (not escaped in any way).\n For bytes, contains the C escaped value.  All bytes \u003e= 128 are escaped.\n TODO(kenton):  Base-64 encode?\n"
          },
          {
            "path": [
              4,
              4,
              2,
              6,
              4
            ],
            "span": [
              201,
              2,
              10
            ]
          },
          {
            "path": [
              4,
              4,
              2,
              6,
              5
            ],
            "span": [
              201,
              11,
              17
            ]
          },
          {
            "path": [
              4,
              4,
              2,
              6,
              1
            ],
            "span": [
              201,
              18,
              31
            ]
          },
          {
            "path": [
              4,
              4,
              2,
              6,
              3
            ],
            "span": [
              201,
              34,
              35
            ]
          },
          {
            "path": [
              4,
              4,
              2,
              7
            ],
            "span": [
              205,
              2,
              33
            ],
            "leadingComments": " If set, gives the index of a oneof in the containing type's oneof_decl\n list.  This field is a member of that oneof.\n"
          },
          {
            "path": [
              4,
              4,
              2,
              7,
              4
            ],
            "span": [
              205,
              2,
              10
            ]
          },
          {
            "path": [
              4,
              4,
              2,
              7,
              5
            ],
            "span": [
              205,
              11,
              16
            ]
          },
          {
            "path": [
              4,
              4,
              2,
              7,
              1
            ],
            "span": [
              205,
              17,
              28
            ]
          },
          {
            "path": [
              4,
              4,
              2,
              7,
              3
            ],
            "span": [
              205,
              31,
              32
            ]
          },
          {
            "path": [
              4,
              4,
              2,
              8
            ],
            "span": [
              211,
              2,
              33
            ],
            "leadingComments": " JSON name of this field. The value is set by protocol compiler. If the\n user has set a \"json_name\" option on this field, that option's value\n will be used. Otherwise, it's deduced from the field's name by converting\n it to camelCase.\n"
          },
          {
            "path": [
              4,
              4,
              2,
              8,
              4
            ],
            "span": [
              211,
              2,
              10
            ]
          },
          {
            "path": [
              4,
              4,
              2,
              8,
              5
            ],
            "span": [
              211,
              11,
              17
            ]
          },
          {
            "path": [
              4,
              4,
              2,
              8,
              1
            ],
            "span": [
              211,
              18,
              27
            ]
          },
          {
            "path": [
              4,
              4,
              2,
              8,
              3
            ],
            "span": [
              211,
              30,
              32
            ]
          },
          {
            "path": [
              4,
              4,
              2,
              9
            ],
            "span": [
              213,
              2,
              36
            ]
          },
          {
            "path": [
              4,
              4,
              2,
              9,
              4
            ],
            "span": [
              213,
              2,
              10
            ]
          },
          {
            "path": [
              4,
              4,
              2,
              9,
              6
            ],
            "span": [
              213,
              11,
              23
            ]
          },
          {
            "path": [
              4,
              4,
              2,
              9,
              1
            ],
            "span": [
              213,
              24,
              31
            ]
          },
          {
            "path": [
              4,
              4,
              2,
              9,
              3
            ],
            "span": [
              213,
              34,
              35
            ]
          },
          {
            "path": [
              4,
              5
            ],
            "span": [
              217,
              0,
              220,
              1
            ],
            "leadingComments": " Describes a oneof.\n"
          },
          {
            "path": [
              4,
              5,
              1
            ],
            "span": [
              217,
              8,
              28
            ]
          },
          {
            "path": [
              4,
              5,
              2,
              0
            ],
            "span": [
              218,
              2,
              27
            ]
          },
          {
            "path": [
              4,
              5,
              2,
              0,
              4
            ],
            "span": [
              218,
              2,
              10
            ]
          },
          {
            "path": [
              4,
              5,
              2,
              0,
              5
            ],
            "span": [
              218,
              11,
              17
            ]
          },
          {
            "path": [
              4,
              5,
              2,
              0,
              1
            ],
            "span": [
              218,
              18,
              22
            ]
          },
          {
            "path": [
              4,
              5,
              2,
              0,
              3
            ],
            "span": [
              218,
              25,
              26
            ]
          },
          {
            "path": [
              4,
              5,
              2,
              1
            ],
            "span": [
              219,
              2,
              36
            ]
          },
          {
            "path": [
              4,
              5,
              2,
              1,
              4
            ],
            "span": [
              219,
              2,
              10
            ]
          },
          {
            "path": [
              4,
              5,
              2,
              1,
              6
            ],
            "span": [
              219,
              11,
              23
            ]
          },
          {
            "path": [
              4,
              5,
              2,
              1,
              1
            ],
            "span": [
              219,
              24,
              31
            ]
          },
          {
            "path": [
              4,
              5,
              2,
              1,
              3
            ],
            "span": [
              219,
              34,
              35
            ]
          },
          {
            "path": [
              4,
              6
            ],
            "span": [
              223,
              0,
              249,
              1
            ],
            "leadingComments": " Describes an enum type.\n"
          },
          {
            "path": [
              4,
              6,
              1
            ],
            "span": [
              223,
              8,
              27
            ]
          },
          {
            "path": [
              4,
              6,
              2,
              0
            ],
            "span": [
              224,
              2,
              27
            ]
          },
          {
            "path": [
              4,
              6,
              2,
              0,
              4
            ],
            "span": [
              224,
              2,
              10
            ]
          },
          {
            "path": [
              4,
              6,
              2,
              0,
              5
            ],
            "span": [
              224,
              11,
              17
            ]
          },
          {
            "path": [
              4,
              6,
              2,
              0,
              1
            ],
            "span": [
              224,
              18,
              22
            ]
          },
          {
            "path": [
              4,
              6,
              2,
              0,
              3
            ],
            "span": [
              224,
              25,
              26
            ]
          },
          {
            "path": [
              4,
              6,
              2,
              1
            ],
            "span": [
              226,
              2,
              46
            ]
          },
          {
            "path": [
              4,
              6,
              2,
              1,
              4
            ],
            "span": [
              226,
              2,
              10
            ]
          },
          {
            "path": [
              4,
              6,
              2,
              1,
              6
            ],
            "span": [
              226,
              11,
              35
            ]
          },
          {
            "path": [
              4,
              6,
              2,
              1,
              1
            ],
            "span": [
              226,
              36,
              41
            ]
          },
          {
            "path": [
              4,
              6,
              2,
              1,
              3
            ],
            "span": [
              226,
              44,
              45
            ]
          },
          {
            "path": [
              4,
              6,
              2,
              2
            ],
            "span": [
              228,
              2,
              35
            ]
          },
          {
            "path": [
              4,
              6,
              2,
              2,
              4
            ],
            "span": [
              228,
              2,
              10
            ]
          },
          {
            "path": [
              4,
              6,
              2,
              2,
              6
            ],
            "span": [
              228,
              11,
              22
            ]
          },
          {
            "path": [
              4,
              6,
              2,
              2,
              1
            ],
            "span": [
              228,
              23,
              30
            ]
          },
          {
            "path": [
              4,
              6,
              2,
              2,
              3
            ],
            "span": [
              228,
              33,
              34
            ]
          },
          {
            "path": [
              4,
              6,
              3,
              0
            ],
            "span": [
              236,
              2,
              239,
              3
            ],
            "leadingComments": " Range of reserved numeric values. Reserved values may not be used by\n entries in the same enum. Reserved ranges may not overlap.\n\n Note that this is distinct from DescriptorProto.ReservedRange in that it\n is inclusive such that it can appropriately represent the entire int32\n domain.\n"
          },
          {
            "path": [
              4,
              6,
              3,
              0,
              1
            ],
            "span": [
              236,
              10,
              27
            ]
          },
          {
            "path": [
              4,
              6,
              3,
              0,
              2,
              0
            ],
            "span": [
              237,
              4,
              29
            ],
            "trailingComments": " Inclusive.\n"
          },
          {
            "path": [
              4,
              6,
              3,
              0,
              2,
              0,
              4
            ],
            "span": [
              237,
              4,
              12
            ]
          },
          {
            "path": [
              4,
              6,
              3,
              0,
              2,
              0,
              5
            ],
            "span": [
              237,
              13,
              18
            ]
          },
          {
            "path": [
              4,
              6,
              3,
              0,
              2,
              0,
              1
            ],
            "span": [
              237,
              19,
              24
            ]
          },
          {
            "path": [
              4,
              6,
              3,
              0,
              2,
              0,
              3
            ],
            "span": [
              237,
              27,
              28
            ]
          },
          {
            "path": [
              4,
              6,
              3,
              0,
              2,
              1
            ],
            "span": [
              238,
              4,
              27
            ],
            "trailingComments": " Inclusive.\n"
          },
          {
            "path": [
              4,
              6,
              3,
              0,
              2,
              1,
              4
            ],
            "span": [
              238,
              4,
              12
            ]
          },
          {
            "path": [
              4,
              6,
              3,
              0,
              2,
              1,
              5
            ],
            "span": [
              238,
              13,
              18
            ]
          },
          {
            "path": [
              4,
              6,
              3,
              0,
              2,
              1,
              1
            ],
            "span": [
              238,
              19,
              22
            ]
          },
          {
            "path": [
              4,
              6,
              3,
              0,
              2,
              1,
              3
            ],
            "span": [
              238,
              25,
              26
            ]
          },
          {
            "path": [
              4,
              6,
              2,
              3
            ],
            "span": [
              244,
              2,
              48
            ],
            "leadingComments": " Range of reserved numeric values. Reserved numeric values may not be used\n by enum values in the same enum declaration. Reserved ranges may not\n overlap.\n"
          },
          {
            "path": [
              4,
              6,
              2,
              3,
              4
            ],
            "span": [
              244,
              2,
              10
            ]
          },
          {
            "path": [
              4,
              6,
              2,
              3,
              6
            ],
            "span": [
              244,
              11,
              28
            ]
          },
          {
            "path": [
              4,
              6,
              2,
              3,
              1
            ],
            "span": [
              244,
              29,
              43
            ]
          },
          {
            "path": [
              4,
              6,
              2,
              3,
              3
            ],
            "span": [
              244,
              46,
              47
            ]
          },
          {
            "path": [
              4,
              6,
              2,
              4
            ],
            "span": [
              248,
              2,
              36
            ],
            "leadingComments": " Reserved enum value names, which may not be reused. A given name may only\n be reserved once.\n"
          },
          {
            "path": [
              4,
              6,
              2,
              4,
              4
            ],
            "span": [
              248,
              2,
              10
            ]
          },
          {
            "path": [
              4,
              6,
              2,
              4,
              5
            ],
            "span": [
              248,
              11,
              17
            ]
          },
          {
            "path": [
              4,
              6,
              2,
              4,
              1
            ],
            "span": [
              248,
              18,
              31
            ]
          },
          {
            "path": [
              4,
              6,
              2,
              4,
              3
            ],
            "span": [
              248,
              34,
              35
            ]
          },
          {
            "path": [
              4,
              7
            ],
            "span": [
              252,
              0,
              257,
              1
            ],
            "leadingComments": " Describes a value within an enum.\n"
          },
          {
            "path": [
              4,
              7,
              1
            ],
            "span": [
              252,
              8,
              32
            ]
          },
          {
            "path": [
              4,
              7,
              2,
              0
            ],
            "span": [
              253,
              2,
              27
            ]
          },
          {
            "path": [
              4,
              7,
              2,
              0,
              4
            ],
            "span": [
              253,
              2,
              10
            ]
          },
          {
            "path": [
              4,
              7,
              2,
              0,
              5
            ],
            "span": [
              253,
              11,
              17
            ]
          },
          {
            "path": [
              4,
              7,
              2,
              0,
              1
            ],
            "span": [
              253,
              18,
              22
            ]
          },
          {
            "path": [
              4,
              7,
              2,
              0,
              3
            ],
            "span": [
              253,
              25,
              26
            ]
          },
          {
            "path": [
              4,
              7,
              2,
              1
            ],
            "span": [
              254,
              2,
              28
            ]
          },
          {
            "path": [
              4,
              7,
              2,
              1,
              4
            ],
            "span": [
              254,
              2,
              10
            ]
          },
          {
            "path": [
              4,
              7,
              2,
              1,
              5
            ],
            "span": [
              254,
              11,
              16
            ]
          },
          {
            "path": [
              4,
              7,
              2,
              1,
              1
            ],
            "span": [
              254,
              17,
              23
            ]
          },
          {
            "path": [
              4,
              7,
              2,
              1,
              3
            ],
            "span": [
              254,
              26,
              27
            ]
          },
          {
            "path": [
              4,
              7,
              2,
              2
            ],
            "span": [
              256,
              2,
              40
            ]
          },
          {
            "path": [
              4,
              7,
              2,
              2,
              4
            ],
            "span": [
              256,
              2,
              10
            ]
          },
          {
            "path": [
              4,
              7,
              2,
              2,
              6
            ],
            "span": [
              256,
              11,
              27
            ]
          },
          {
            "path": [
              4,
              7,
              2,
              2,
              1
            ],
            "span": [
              256,
              28,
              35
            ]
          },
          {
            "path": [
              4,
              7,
              2,
              2,
              3
            ],
            "span": [
              256,
              38,
              39
            ]
          },
          {
            "path": [
              4,
              8
            ],
            "span": [
              260,
              0,
              265,
              1
            ],
            "leadingComments": " Describes a service.\n"
          },
          {
            "path": [
              4,
              8,
              1
            ],
            "span": [
              260,
              8,
              30
            ]
          },
          {
            "path": [
              4,
              8,
              2,
              0
            ],
            "span": [
              261,
              2,
              27
            ]
          },
          {
            "path": [
              4,
              8,
              2,
              0,
              4
            ],
            "span": [
              261,
              2,
              10
            ]
          },
          {
            "path": [
              4,
              8,
              2,
              0,
              5
            ],
            "span": [
              261,
              11,
              17
            ]
          },
          {
            "path": [
              4,
              8,
              2,
              0,
              1
            ],
            "span": [
              261,
              18,
              22
            ]
          },
          {
            "path": [
              4,
              8,
              2,
              0,
              3
            ],
            "span": [
              261,
              25,
              26
            ]
          },
          {
            "path": [
              4,
              8,
              2,
              1
            ],
            "span": [
              262,
              2,
              44
            ]
          },
          {
            "path": [
              4,
              8,
              2,
              1,
              4
            ],
            "span": [
              262,
              2,
              10
            ]
          },
          {
            "path": [
              4,
              8,
              2,
              1,
              6
            ],
            "span": [
              262,
              11,
              32
            ]
          },
          {
            "path": [
              4,
              8,
              2,
              1,
              1
            ],
            "span": [
              262,
              33,
              39
            ]
          },
          {
            "path": [
              4,
              8,
              2,
              1,
              3
            ],
            "span": [
              262,
              42,
              43
            ]
          },
          {
            "path": [
              4,
              8,
              2,
              2
            ],
            "span": [
              264,
              2,
              38
            ]
          },
          {
            "path": [
              4,
              8,
              2,
              2,
              4
            ],
            "span": [
              264,
              2,
              10
            ]
          },
          {
            "path": [
              4,
              8,
              2,
              2,
              6
            ],
            "span": [
              264,
              11,
              25
            ]
          },
          {
            "path": [
              4,
              8,
              2,
              2,
              1
            ],
            "span": [
              264,
              26,
              33
            ]
          },
          {
            "path": [
              4,
              8,
              2,
              2,
              3
            ],
            "span": [
              264,
              36,
              37
            ]
          },
          {
            "path": [
              4,
              9
            ],
            "span": [
              268,
              0,
              282,
              1
            ],
            "leadingComments": " Describes a method of a service.\n"
          },
          {
            "path": [
              4,
              9,
              1
            ],
            "span": [
              268,
              8,
              29
            ]
          },
          {
            "path": [
              4,
              9,
              2,
              0
            ],
            "span": [
              269,
              2,
              27
            ]
          },
          {
            "path": [
              4,
              9,
              2,
              0,
              4
            ],
            "span": [
              269,
              2,
              10
            ]
          },
          {
            "path": [
              4,
              9,
              2,
              0,
              5
            ],
            "span": [
              269,
              11,
              17
            ]
          },
          {
            "path": [
              4,
              9,
              2,
              0,
              1
            ],
            "span": [
              269,
              18,
              22
            ]
          },
          {
            "path": [
              4,
              9,
              2,
              0,
              3
            ],
            "span": [
              269,
              25,
              26
            ]
          },
          {
            "path": [
              4,
              9,
              2,
              1
            ],
            "span": [
              273,
              2,
              33
            ],
            "leadingComments": " Input and output type names.  These are resolved in the same way as\n FieldDescriptorProto.type_name, but must refer to a message type.\n"
          },
          {
            "path": [
              4,
              9,
              2,
              1,
              4
            ],
            "span": [
              273,
              2,
              10
            ]
          },
          {
            "path": [
              4,
              9,
              2,
              1,
              5
            ],
            "span": [
              273,
              11,
              17
            ]
          },
          {
            "path": [
              4,
              9,
              2,
              1,
              1
            ],
            "span": [
              273,
              18,
              28
            ]
          },
          {
            "path": [
              4,
              9,
              2,
              1,
              3
            ],
            "span": [
              273,
              31,
              32
            ]
          },
          {
            "path": [
              4,
              9,
              2,
              2
            ],
            "span": [
              274,
              2,
              34
            ]
          },
          {
            "path": [
              4,
              9,
              2,
              2,
              4
            ],
            "span": [
              274,
              2,
              10
            ]
          },
          {
            "path": [
              4,
              9,
              2,
              2,
              5
            ],
            "span": [
              274,
              11,
              17
            ]
          },
          {
            "path": [
              4,
              9,
              2,
              2,
              1
            ],
            "span": [
              274,
              18,
              29
            ]
          },
          {
            "path": [
              4,
              9,
              2,
              2,
              3
            ],
            "span": [
              274,
              32,
              33
            ]
          },
          {
            "path": [
              4,
              9,
              2,
              3
            ],
            "span": [
              276,
              2,
              37
            ]
          },
          {
            "path": [
              4,
              9,
              2,
              3,
              4
            ],
            "span": [
              276,
              2,
              10
            ]
          },
          {
            "path": [
              4,
              9,
              2,
              3,
              6
            ],
            "span": [
              276,
              11,
              24
            ]
          },
          {
            "path": [
              4,
              9,
              2,
              3,
              1
            ],
            "span": [
              276,
              25,
              32
            ]
          },
          {
            "path": [
              4,
              9,
              2,
              3,
              3
            ],
            "span": [
              276,
              35,
              36
            ]
          },
          {
            "path": [
              4,
              9,
              2,
              4
            ],
            "span": [
              279,
              2,
              55
            ],
            "leadingComments": " Identifies if client streams multiple client messages\n"
          },
          {
            "path": [
              4,
              9,
              2,
              4,
              4
            ],
            "span": [
              279,
              2,
              10
            ]
          },
          {
            "path": [
              4,
              9,
              2,
              4,
              5
            ],
            "span": [
              279,
              11,
              15
            ]
          },
          {
            "path": [
              4,
              9,
              2,
              4,
              1
            ],
            "span": [
              279,
              16,
              32
            ]
          },
          {
            "path": [
              4,
              9,
              2,
              4,
              3
            ],
            "span": [
              279,
              35,
              36
            ]
          },
          {
            "path": [
              4,
              9,
              2,
              4,
              8
            ],
            "span": [
              279,
              37,
              54
            ]
          },
          {
            "path": [
              4,
              9,
              2,
              4,
              7
            ],
            "span": [
              279,
              48,
              53
            ]
          },
          {
            "path": [
              4,
              9,
              2,
              5
            ],
            "span": [
              281,
              2,
              55
            ],
            "leadingComments": " Identifies if server streams multiple server messages\n"
          },
          {
            "path": [
              4,
              9,
              2,
              5,
              4
            ],
            "span": [
              281,
              2,
              10
            ]
          },
          {
            "path": [
              4,
              9,
              2,
              5,
              5
            ],
            "span": [
              281,
              11,
              15
            ]
          },
          {
            "path": [
              4,
              9,
              2,
              5,
              1
            ],
            "span": [
              281,
              16,
              32
            ]
          },
          {
            "path": [
              4,
              9,
              2,
              5,
              3
            ],
            "span": [
              281,
              35,
              36
            ]
          },
          {
            "path": [
              4,
              9,
              2,
              5,
              8
            ],
            "span": [
              281,
              37,
              54
            ]
          },
          {
            "path": [
              4,
              9,
              2,
              5,
              7
            ],
            "span": [
              281,
              48,
              53
            ]
          },
          {
            "path": [
              4,
              10
            ],
            "span": [
              317,
              0,
              440,
              1
            ],
            "leadingDetachedComments": [
              " ===================================================================\n Options\n",
              " Each of the definitions above may have \"options\" attached.  These are\n just annotations which may cause code to be generated slightly differently\n or may contain hints for code that manipulates protocol messages.\n\n Clients may define custom options as extensions of the *Options messages.\n These extensions may not yet be known at parsing time, so the parser cannot\n store the values in them.  Instead it stores them in a field in the *Options\n message called uninterpreted_option. This field must have the same name\n across all *Options messages. We then use this field to populate the\n extensions when we build a descriptor, at which point all protos have been\n parsed and so all extensions are known.\n\n Extension numbers for custom options may be chosen as follows:\n * For options which will only be used within a single application or\n   organization, or for experimental options, use field numbers 50000\n   through 99999.  It is up to you to ensure that you do not use the\n   same number for multiple options.\n * For options which will be published and used publicly by multiple\n   independent entities, e-mail protobuf-global-extension-registry@google.com\n   to reserve extension numbers. Simply provide your project name (e.g.\n   Objective-C plugin) and your project website (if available) -- there's no\n   need to explain how you intend to use them. Usually you only need one\n   extension number. You can declare multiple options with only one extension\n   number by putting them in a sub-message. See the Custom Options section of\n   the docs for examples:\n   https://developers.google.com/protocol-buffers/docs/proto#options\n   If this turns out to be popular, a web service will be set up\n   to automatically assign option numbers.\n"
            ]
          },
          {
            "path": [
              4,
              10,
              1
            ],
            "span": [
              317,
              8,
              19
            ]
          },
          {
            "path": [
              4,
              10,
              2,
              0
            ],
            "span": [
              323,
              2,
              35
            ],
            "leadingComments": " Sets the Java package where classes generated from this .proto will be\n placed.  By default, the proto package is used, but this is often\n inappropriate because proto packages do not normally start with backwards\n domain names.\n"
          },
          {
            "path": [
              4,
              10,
              2,
              0,
              4
            ],
            "span": [
              323,
              2,
              10
            ]
          },
          {
            "path": [
              4,
              10,
              2,
              0,
              5
            ],
            "span": [
              323,
              11,
              17
            ]
          },
          {
            "path": [
              4,
              10,
              2,
              0,
              1
            ],
            "span": [
              323,
              18,
              30
            ]
          },
          {
            "path": [
              4,
              10,
              2,
              0,
              3
            ],
            "span": [
              323,
              33,
              34
            ]
          },
          {
            "path": [
              4,
              10,
              2,
              1
            ],
            "span": [
              331,
              2,
              43
            ],
            "leadingComments": " If set, all the classes from the .proto file are wrapped in a single\n outer class with the given name.  This applies to both Proto1\n (equivalent to the old \"--one_java_file\" option) and Proto2 (where\n a .proto always translates to a single class, but you may want to\n explicitly choose the class name).\n"
          },
          {
            "path": [
              4,
              10,
              2,
              1,
              4
            ],
            "span": [
              331,
              2,
              10
            ]
          },
          {
            "path": [
              4,
              10,
              2,
              1,
              5
            ],
            "span": [
              331,
              11,
              17
            ]
          },
          {
            "path": [
              4,
              10,
              2,
              1,
              1
            ],
            "span": [
              331,
              18,
              38
            ]
          },
          {
            "path": [
              4,
              10,
              2,
              1,
              3
            ],
            "span": [
              331,
              41,
              42
            ]
          },
          {
            "path": [
              4,
              10,
              2,
              2
            ],
            "span": [
              339,
              2,
              59
            ],
            "leadingComments": " If set true, then the Java code generator will generate a separate .java\n file for each top-level message, enum, and service defined in the .proto\n file.  Thus, these types will *not* be nested inside the outer class\n named by java_outer_classname.  However, the outer class will still be\n generated to contain the file's getDescriptor() method as well as any\n top-level extensions defined in the file.\n"
          },
          {
            "path": [
              4,
              10,
              2,
              2,
              4
            ],
            "span": [
              339,
              2,
              10
            ]
          },
          {
            "path": [
              4,
              10,
              2,
              2,
              5
            ],
            "span": [
              339,
              11,
              15
            ]
          },
          {
            "path": [
              4,
              10,
              2,
              2,
              1
            ],
            "span": [
              339,
              16,
              35
            ]
          },
          {
            "path": [
              4,
              10,
              2,
              2,
              3
            ],
            "span": [
              339,
              38,
              40
            ]
          },
          {
            "path": [
              4,
              10,
              2,
              2,
              8
            ],
            "span": [
              339,
              41,
              58
            ]
          },
          {
            "path": [
              4,
              10,
              2,
              2,
              7
            ],
            "span": [
              339,
              52,
              57
            ]
          },
          {
            "path": [
              4,
              10,
              2,
              3
            ],
            "span": [
              342,
              2,
              69
            ],
            "leadingComments": " This option does nothing.\n"
          },
          {
            "path": [
              4,
              10,
              2,
              3,
              4
            ],
            "span": [
              342,
              2,
              10
            ]
          },
          {
            "path": [
              4,
              10,
              2,
              3,
              5
            ],
            "span": [
              342,
              11,
              15
            ]
          },
          {
            "path": [
              4,
              10,
              2,
              3,
              1
            ],
            "span": [
              342,
              16,
              45
            ]
          },
          {
            "path": [
              4,
              10,
              2,
              3,
              3
            ],
            "span": [
              342,
              48,
              50
            ]
          },
          {
            "path": [
              4,
              10,
              2,
              3,
              8
            ],
            "span": [
              342,
              51,
              68
            ]
          },
          {
            "path": [
              4,
              10,
              2,
              3,
              8,
              3
            ],
            "span": [
              342,
              52,
              67
            ]
          },
          {
            "path": [
              4,
              10,
              2,
              4
            ],
            "span": [
              350,
              2,
              62
            ],
            "leadingComments": " If set true, then the Java2 code generator will generate code that\n throws an exception whenever an attempt is made to assign a non-UTF-8\n byte sequence to a string field.\n Message reflection will do the same.\n However, an extension field still accepts non-UTF-8 byte sequences.\n This option has no effect on when used with the lite runtime.\n"
          },
          {
            "path": [
              4,
              10,
              2,
              4,
              4
            ],
            "span": [
              350,
              2,
              10
            ]
          },
          {
            "path": [
              4,
              10,
              2,
              4,
              5
            ],
            "span": [
              350,
              11,
              15
            ]
          },
          {
            "path": [
              4,
              10,
              2,
              4,
              1
            ],
            "span": [
              350,
              16,
              38
            ]
          },
          {
            "path": [
              4,
              10,
              2,
              4,
              3
            ],
            "span": [
              350,
              41,
              43
            ]
          },
          {
            "path": [
              4,
              10,
              2,
              4,
              8
            ],
            "span": [
              350,
              44,
              61
            ]
          },
          {
            "path": [
              4,
              10,
              2,
              4,
              7
            ],
            "span": [
              350,
              55,
              60
            ]
          },
          {
            "path": [
              4,
              10,
              4,
              0
            ],
            "span": [
              354,
              2,
              359,
              3
            ],
            "leadingComments": " Generated classes can be optimized for speed or code size.\n"
          },
          {
            "path": [
              4,
              10,
              4,
              0,
              1
            ],
            "span": [
              354,
              7,
              19
            ]
          },
          {
            "path": [
              4,
              10,
              4,
              0,
              2,
              0
            ],
            "span": [
              355,
              4,
              14
            ],
            "trailingComments": " Generate complete code for parsing, serialization,\n"
          },
          {
            "path": [
              4,
              10,
              4,
              0,
              2,
              0,
              1
            ],
            "span": [
              355,
              4,
              9
            ]
          },
          {
            "path": [
              4,
              10,
              4,
              0,
              2,
              0,
              2
            ],
            "span": [
              355,
              12,
              13
            ]
          },
          {
            "path": [
              4,
              10,
              4,
              0,
              2,
              1
            ],
            "span": [
              357,
              4,
              18
            ],
            "leadingComments": " etc.\n",
            "trailingComments": " Use ReflectionOps to implement these methods.\n"
          },
          {
            "path": [
              4,
              10,
              4,
              0,
              2,
              1,
              1
            ],
            "span": [
              357,
              4,
              13
            ]
          },
          {
            "path": [
              4,
              10,
              4,
              0,
              2,
              1,
              2
            ],
            "span": [
              357,
              16,
              17
            ]
          },
          {
            "path": [
              4,
              10,
              4,
              0,
              2,
              2
            ],
            "span": [
              358,
              4,
              21
            ],
            "trailingComments": " Generate code using MessageLite and the lite runtime.\n"
          },
          {
            "path": [
              4,
              10,
              4,
              0,
              2,
              2,
              1
            ],
            "span": [
              358,
              4,
              16
            ]
          },
          {
            "path": [
              4,
              10,
              4,
              0,
              2,
              2,
              2
            ],
            "span": [
              358,
              19,
              20
            ]
          },
          {
            "path": [
              4,
              10,
              2,
              5
            ],
            "span": [
              360,
              2,
              59
            ]
          },
          {
            "path": [
              4,
              10,
              2,
              5,
              4
            ],
            "span": [
              360,
              2,
              10
            ]
          },
          {
            "path": [
              4,
              10,
              2,
              5,
              6
            ],
            "span": [
              360,
              11,
              23
            ]
          },
          {
            "path": [
              4,
              10,
              2,
              5,
              1
            ],
            "span": [
              360,
              24,
              36
            ]
          },
          {
            "path": [
              4,
              10,
              2,
              5,
              3
            ],
            "span": [
              360,
              39,
              40
            ]
          },
          {
            "path": [
              4,
              10,
              2,
              5,
              8
            ],
            "span": [
              360,
              41,
              58
            ]
          },
          {
            "path": [
              4,
              10,
              2,
              5,
              7
            ],
            "span": [
              360,
              52,
              57
            ]
          },
          {
            "path": [
              4,
              10,
              2,
              6
            ],
            "span": [
              367,
              2,
              34
            ],
            "leadingComments": " Sets the Go package where structs generated from this .proto will be\n placed. If omitted, the Go package will be derived from the following:\n   - The basename of the package import path, if provided.\n   - Otherwise, the package statement in the .proto file, if present.\n   - Otherwise, the basename of the .proto file, without extension.\n"
          },
          {
            "path": [
              4,
              10,
              2,
              6,
              4
            ],
            "span": [
              367,
              2,
              10
            ]
          },
          {
            "path": [
              4,
              10,
              2,
              6,
              5
            ],
            "span": [
              367,
              11,
              17
            ]
          },
          {
            "path": [
              4,
              10,
              2,
              6,
              1
            ],
            "span": [
              367,
              18,
              28
            ]
          },
          {
            "path": [
              4,
              10,
              2,
              6,
              3
            ],
            "span": [
              367,
              31,
              33
            ]
          },
          {
            "path": [
              4,
              10,
              2,
              7
            ],
            "span": [
              382,
              2,
              59
            ],
            "leadingComments": " Should generic services be generated in each language?  \"Generic\" services\n are not specific to any particular RPC system.  They are generated by the\n main code generators in each language (without additional plugins).\n Generic services were the only kind of service generation supported by\n early versions of google.protobuf.\n\n Generic services are now considered deprecated in favor of using plugins\n that generate code specific to your particular RPC system.  Therefore,\n these default to false.  Old code which depends on generic services should\n explicitly set them to true.\n"
          },
          {
            "path": [
              4,
              10,
              2,
              7,
              4
            ],
            "span": [
              382,
              2,
              10
            ]
          },
          {
            "path": [
              4,
              10,
              2,
              7,
              5
            ],
            "span": [
              382,
              11,
              15
            ]
          },
          {
            "path": [
              4,
              10,
              2,
              7,
              1
            ],
            "span": [
              382,
              16,
              35
            ]
          },
          {
            "path": [
              4,
              10,
              2,
              7,
              3
            ],
            "span": [
              382,
              38,
              40
            ]
          },
          {
            "path": [
              4,
              10,
              2,
              7,
              8
            ],
            "span": [
              382,
              41,
              58
            ]
          },
          {
            "path": [
              4,
              10,
              2,
              7,
              7
            ],
            "span": [
              382,
              52,
              57
            ]
          },
          {
            "path": [
              4,
              10,
              2,
              8
            ],
            "span": [
              383,
              2,
              61
            ]
          },
          {
            "path": [
              4,
              10,
              2,
              8,
              4
            ],
            "span": [
              383,
              2,
              10
            ]
          },
          {
            "path": [
              4,
              10,
              2,
              8,
              5
            ],
            "span": [
              383,
              11,
              15
            ]
          },
          {
            "path": [
              4,
              10,
              2,
              8,
              1
            ],
            "span": [
              383,
              16,
              37
            ]
          },
          {
            "path": [
              4,
              10,
              2,
              8,
              3
            ],
            "span": [
              383,
              40,
              42
            ]
          },
          {
            "path": [
              4,
              10,
              2,
              8,
              8
            ],
            "span": [
              383,
              43,
              60
            ]
          },
          {
            "path": [
              4,
              10,
              2,
              8,
              7
            ],
            "span": [
              383,
              54,
              59
            ]
          },
          {
            "path": [
              4,
              10,
              2,
              9
            ],
            "span": [
              384,
              2,
              59
            ]
          },
          {
            "path": [
              4,
              10,
              2,
              9,
              4
            ],
            "span": [
              384,
              2,
              10
            ]
          },
          {
            "path": [
              4,
              10,
              2,
              9,
              5
            ],
            "span": [
              384,
              11,
              15
            ]
          },
          {
            "path": [
              4,
              10,
              2,
              9,
              1
            ],
            "span": [
              384,
              16,
              35
            ]
          },
          {
            "path": [
              4,
              10,
              2,
              9,
              3
            ],
            "span": [
              384,
              38,
              40
            ]
          },
          {
            "path": [
              4,
              10,
              2,
              9,
              8
            ],
            "span": [
              384,
              41,
              58
            ]
          },
          {
            "path": [
              4,
              10,
              2,
              9,
              7
            ],
            "span": [
              384,
              52,
              57
            ]
          },
          {
            "path": [
              4,
              10,
              2,
              10
            ],
            "span": [
              385,
              2,
              60
            ]
          },
          {
            "path": [
              4,
              10,
              2,
              10,
              4
            ],
            "span": [
              385,
              2,
              10
            ]
          },
          {
            "path": [
              4,
              10,
              2,
              10,
              5
            ],
            "span": [
              385,
              11,
              15
            ]
          },
          {
            "path": [
              4,
              10,
              2,
              10,
              1
            ],
            "span": [
              385,
              16,
              36
            ]
          },
          {
            "path": [
              4,
              10,
              2,
              10,
              3
            ],
            "span": [
              385,
              39,
              41
            ]
          },
          {
            "path": [
              4,
              10,
              2,
              10,
              8
            ],
            "span": [
              385,
              42,
              59
            ]
          },
          {
            "path": [
              4,
              10,
              2,
              10,
              7
            ],
            "span": [
              385,
              53,
              58
            ]
          },
          {
            "path": [
              4,
              10,
              2,
              11
            ],
            "span": [
              391,
              2,
              50
            ],
            "leadingComments": " Is this file deprecated?\n Depending on the target platform, this can emit Deprecated annotations\n for everything in the file, or it will be completely ignored; in the very\n least, this is a formalization for deprecating files.\n"
          },
          {
            "path": [
              4,
              10,
              2,
              11,
              4
            ],
            "span": [
              391,
              2,
              10
            ]
          },
          {
            "path": [
              4,
              10,
              2,
              11,
              5
            ],
            "span": [
              391,
              11,
              15
            ]
          },
          {
            "path": [
              4,
              10,
              2,
              11,
              1
            ],
            "span": [
              391,
              16,
              26
            ]
          },
          {
            "path": [
              4,
              10,
              2,
              11,
              3
            ],
            "span": [
              391,
              29,
              31
            ]
          },
          {
            "path": [
              4,
              10,
              2,
              11,
              8
            ],
            "span": [
              391,
              32,
              49
            ]
          },
          {
            "path": [
              4,
              10,
              2,
              11,
              7
            ],
            "span": [
              391,
              43,
              48
            ]
          },
          {
            "path": [
              4,
              10,
              2,
              12
            ],
            "span": [
              395,
              2,
              56
            ],
            "leadingComments": " Enables the use of arenas for the proto messages in this file. This applies\n only to generated classes for C++.\n"
          },
          {
            "path": [
              4,
              10,
              2,
              12,
              4
            ],
            "span": [
              395,
              2,
              10
            ]
          },
          {
            "path": [
              4,
              10,
              2,
              12,
              5
            ],
            "span": [
              395,
              11,
              15
            ]
          },
          {
            "path": [
              4,
              10,
              2,
              12,
              1
            ],
            "span": [
              395,
              16,
              32
            ]
          },
          {
            "path": [
              4,
              10,
              2,
              12,
              3
            ],
            "span": [
              395,
              35,
              37
            ]
          },
          {
            "path": [
              4,
              10,
              2,
              12,
              8
            ],
            "span": [
              395,
              38,
              55
            ]
          },
          {
            "path": [
              4,
              10,
              2,
              12,
              7
            ],
            "span": [
              395,
              49,
              54
            ]
          },
          {
            "path": [
              4,
              10,
              2,
              13
            ],
            "span": [
              400,
              2,
              41
            ],
            "leadingComments": " Sets the objective c class prefix which is prepended to all objective c\n generated classes from this .proto. There is no default.\n"
          },
          {
            "path": [
              4,
              10,
              2,
              13,
              4
            ],
            "span": [
              400,
              2,
              10
            ]
          },
          {
            "path": [
              4,
              10,
              2,
              13,
              5
            ],
            "span": [
              400,
              11,
              17
            ]
          },
          {
            "path": [
              4,
              10,
              2,
              13,
              1
            ],
            "span": [
              400,
              18,
              35
            ]
          },
          {
            "path": [
              4,
              10,
              2,
              13,
              3
            ],
            "span": [
              400,
              38,
              40
            ]
          },
          {
            "path": [
              4,
              10,
              2,
              14
            ],
            "span": [
              403,
              2,
              40
            ],
            "leadingComments": " Namespace for generated classes; defaults to the package.\n"
          },
          {
            "path": [
              4,
              10,
              2,
              14,
              4
            ],
            "span": [
              403,
              2,
              10
            ]
          },
          {
            "path": [
              4,
              10,
              2,
              14,
              5
            ],
            "span": [
              403,
              11,
              17
            ]
          },
          {
            "path": [
              4,
              10,
              2,
              14,
              1
            ],
            "span": [
              403,
              18,
              34
            ]
          },
          {
            "path": [
              4,
              10,
              2,
              14,
              3
            ],
            "span": [
              403,
              37,
              39
            ]
          },
          {
            "path": [
              4,
              10,
              2,
              15
            ],
            "span": [
              409,
              2,
              36
            ],
            "leadingComments": " By default Swift generators will take the proto package and CamelCase it\n replacing '.' with underscore and use that to prefix the types/symbols\n defined. When this options is provided, they will use this value instead\n to prefix the types/symbols defined.\n"
          },
          {
            "path": [
              4,
              10,
              2,
              15,
              4
            ],
            "span": [
              409,
              2,
              10
            ]
          },
          {
            "path": [
              4,
              10,
              2,
              15,
              5
            ],
            "span": [
              409,
              11,
              17
            ]
          },
          {
            "path": [
              4,
              10,
              2,
              15,
              1
            ],
            "span": [
              409,
              18,
              30
            ]
          },
          {
            "path": [
              4,
              10,
              2,
              15,
              3
            ],
            "span": [
              409,
              33,
              35
            ]
          },
          {
            "path": [
              4,
              10,
              2,
              16
            ],
            "span": [
              413,
              2,
              40
            ],
            "leadingComments": " Sets the php class prefix which is prepended to all php generated classes\n from this .proto. Default is empty.\n"
          },
          {
            "path": [
              4,
              10,
              2,
              16,
              4
            ],
            "span": [
              413,
              2,
              10
            ]
          },
          {
            "path": [
              4,
              10,
              2,
              16,
              5
            ],
            "span": [
              413,
              11,
              17
            ]
          },
          {
            "path": [
              4,
              10,
              2,
              16,
              1
            ],
            "span": [
              413,
              18,
              34
            ]
          },
          {
            "path": [
              4,
              10,
              2,
              16,
              3
            ],
            "span": [
              413,
              37,
              39
            ]
          },
          {
            "path": [
              4,
              10,
              2,
              17
            ],
            "span": [
              418,
              2,
              37
            ],
            "leadingComments": " Use this option to change the namespace of php generated classes. Default\n is empty. When this option is empty, the package name will be used for\n determining the namespace.\n"
          },
          {
            "path": [
              4,
              10,
              2,
              17,
              4
            ],
            "span": [
              418,
              2,
              10
            ]
          },
          {
            "path": [
              4,
              10,
              2,
              17,
              5
            ],
            "span": [
              418,
              11,
              17
            ]
          },
          {
            "path": [
              4,
              10,
              2,
              17,
              1
            ],
            "span": [
              418,
              18,
              31
            ]
          },
          {
            "path": [
              4,
              10,
              2,
              17,
              3
            ],
            "span": [
              418,
              34,
              36
            ]
          },
          {
            "path": [
              4,
              10,
              2,
              18
            ],
            "span": [
              423,
              2,
              46
            ],
            "leadingComments": " Use this option to change the namespace of php generated metadata classes.\n Default is empty. When this option is empty, the proto file name will be\n used for determining the namespace.\n"
          },
          {
            "path": [
              4,
              10,
              2,
              18,
              4
            ],
            "span": [
              423,
              2,
              10
            ]
          },
          {
            "path": [
              4,
              10,
              2,
              18,
              5
            ],
            "span": [
              423,
              11,
              17
            ]
          },
          {
            "path": [
              4,
              10,
              2,
              18,
              1
            ],
            "span": [
              423,
              18,
              40
            ]
          },
          {
            "path": [
              4,
              10,
              2,
              18,
              3
            ],
            "span": [
              423,
              43,
              45
            ]
          },
          {
            "path": [
              4,
              10,
              2,
              19
            ],
            "span": [
              428,
              2,
              36
            ],
            "leadingComments": " Use this option to change the package of ruby generated classes. Default\n is empty. When this option is not set, the package name will be used for\n determining the ruby package.\n"
          },
          {
            "path": [
              4,
              10,
              2,
              19,
              4
            ],
            "span": [
              428,
              2,
              10
            ]
          },
          {
            "path": [
              4,
              10,
              2,
              19,
              5
            ],
            "span": [
              428,
              11,
              17
            ]
          },
          {
            "path": [
              4,
              10,
              2,
              19,
              1
            ],
            "span": [
              428,
              18,
              30
            ]
          },
          {
            "path": [
              4,
              10,
              2,
              19,
              3
            ],
            "span": [
              428,
              33,
              35
            ]
          },
          {
            "path": [
              4,
              10,
              2,
              20
            ],
            "span": [
              433,
              2,
              58
            ],
            "leadingComments": " The parser stores options it doesn't recognize here.\n See the documentation for the \"Options\" section above.\n"
          },
          {
            "path": [
              4,
              10,
              2,
              20,
              4
            ],
            "span": [
              433,
              2,
              10
            ]
          },
          {
            "path": [
              4,
              10,
              2,
              20,
              6
            ],
            "span": [
              433,
              11,
              30
            ]
          },
          {
            "path": [
              4,
              10,
              2,
              20,
              1
            ],
            "span": [
              433,
              31,
              51
            ]
          },
          {
            "path": [
              4,
              10,
              2,
              20,
              3
            ],
            "span": [
              433,
              54,
              57
            ]
          },
          {
            "path": [
              4,
              10,
              5
            ],
            "span": [
              437,
              2,
              25
            ],
            "leadingComments": " Clients can define custom options in extensions of this message.\n See the documentation for the \"Options\" section above.\n"
          },
          {
            "path": [
              4,
              10,
              5,
              0
            ],
            "span": [
              437,
              13,
              24
            ]
          },
          {
            "path": [
              4,
              10,
              5,
              0,
              1
            ],
            "span": [
              437,
              13,
              17
            ]
          },
          {
            "path": [
              4,
              10,
              5,
              0,
              2
            ],
            "span": [
              437,
              21,
              24
            ]
          },
          {
            "path": [
              4,
              10,
              9
            ],
            "span": [
              439,
              2,
              14
            ]
          },
          {
            "path": [
              4,
              10,
              9,
              0
            ],
            "span": [
              439,
              11,
              13
            ]
          },
          {
            "path": [
              4,
              10,
              9,
              0,
              1
            ],
            "span": [
              439,
              11,
              13
            ]
          },
          {
            "path": [
              4,
              10,
              9,
              0,
              2
            ],
            "span": [
              439,
              11,
              13
            ]
          },
          {
            "path": [
              4,
              11
            ],
            "span": [
              442,
              0,
              506,
              1
            ]
          },
          {
            "path": [
              4,
              11,
              1
            ],
            "span": [
              442,
              8,
              22
            ]
          },
          {
            "path": [
              4,
              11,
              2,
              0
            ],
            "span": [
              461,
              2,
              62
            ],
            "leadingComments": " Set true to use the old proto1 MessageSet wire format for extensions.\n This is provided for backwards-compatibility with the MessageSet wire\n format.  You should not use this for any other reason:  It's less\n efficient, has fewer features, and is more complicated.\n\n The message must be defined exactly as follows:\n   message Foo {\n     option message_set_wire_format = true;\n     extensions 4 to max;\n   }\n Note that the message cannot have any defined fields; MessageSets only\n have extensions.\n\n All extensions of your type must be singular messages; e.g. they cannot\n be int32s, enums, or repeated messages.\n\n Because this is an option, the above two restrictions are not enforced by\n the protocol compiler.\n"
          },
          {
            "path": [
              4,
              11,
              2,
              0,
              4
            ],
            "span": [
              461,
              2,
              10
            ]
          },
          {
            "path": [
              4,
              11,
              2,
              0,
              5
            ],
            "span": [
              461,
              11,
              15
            ]
          },
          {
            "path": [
              4,
              11,
              2,
              0,
              1
            ],
            "span": [
              461,
              16,
              39
            ]
          },
          {
            "path": [
              4,
              11,
              2,
              0,
              3
            ],
            "span": [
              461,
              42,
              43
            ]
          },
          {
            "path": [
              4,
              11,
              2,
              0,
              8
            ],
            "span": [
              461,
              44,
              61
            ]
          },
          {
            "path": [
              4,
              11,
              2,
              0,
              7
            ],
            "span": [
              461,
              55,
              60
            ]
          },
          {
            "path": [
              4,
              11,
              2,
              1
            ],
            "span": [
              466,
              2,
              70
            ],
            "leadingComments": " Disables the generation of the standard \"descriptor()\" accessor, which can\n conflict with a field of the same name.  This is meant to make migration\n from proto1 easier; new code should avoid fields named \"descriptor\".\n"
          },
          {
            "path": [
              4,
              11,
              2,
              1,
              4
            ],
            "span": [
              466,
              2,
              10
            ]
          },
          {
            "path": [
              4,
              11,
              2,
              1,
              5
            ],
            "span": [
              466,
              11,
              15
            ]
          },
          {
            "path": [
              4,
              11,
              2,
              1,
              1
            ],
            "span": [
              466,
              16,
              47
            ]
          },
          {
            "path": [
              4,
              11,
              2,
              1,
              3
            ],
            "span": [
              466,
              50,
              51
            ]
          },
          {
            "path": [
              4,
              11,
              2,
              1,
              8
            ],
            "span": [
              466,
              52,
              69
            ]
          },
          {
            "path": [
              4,
              11,
              2,
              1,
              7
            ],
            "span": [
              466,
              63,
              68
            ]
          },
          {
            "path": [
              4,
              11,
              2,
              2
            ],
            "span": [
              472,
              2,
              49
            ],
            "leadingComments": " Is this message deprecated?\n Depending on the target platform, this can emit Deprecated annotations\n for the message, or it will be completely ignored; in the very least,\n this is a formalization for deprecating messages.\n"
          },
          {
            "path": [
              4,
              11,
              2,
              2,
              4
            ],
            "span": [
              472,
              2,
              10
            ]
          },
          {
            "path": [
              4,
              11,
              2,
              2,
              5
            ],
            "span": [
              472,
              11,
              15
            ]
          },
          {
            "path": [
              4,
              11,
              2,
              2,
              1
            ],
            "span": [
              472,
              16,
              26
            ]
          },
          {
            "path": [
              4,
              11,
              2,
              2,
              3
            ],
            "span": [
              472,
              29,
              30
            ]
          },
          {
            "path": [
              4,
              11,
              2,
              2,
              8
            ],
            "span": [
              472,
              31,
              48
            ]
          },
          {
            "path": [
              4,
              11,
              2,
              2,
              7
            ],
            "span": [
              472,
              42,
              47
            ]
          },
          {
            "path": [
              4,
              11,
              2,
              3
            ],
            "span": [
              495,
              2,
              30
            ],
            "leadingComments": " Whether the message is an automatically generated map entry type for the\n maps field.\n\n For maps fields:\n     map\u003cKeyType, ValueType\u003e map_field = 1;\n The parsed descriptor looks like:\n     message MapFieldEntry {\n         option map_entry = true;\n         optional KeyType key = 1;\n         optional ValueType value = 2;\n     }\n     repeated MapFieldEntry map_field = 1;\n\n Implementations may choose not to generate the map_entry=true message, but\n use a native map in the target language to hold the keys and values.\n The reflection APIs in such implementations still need to work as\n if the field is a repeated message field.\n\n NOTE: Do not set the option in .proto files. Always use the maps syntax\n instead. The option should only be implicitly set by the proto compiler\n parser.\n"
          },
          {
            "path": [
              4,
              11,
              2,
              3,
              4
            ],
            "span": [
              495,
              2,
              10
            ]
          },
          {
            "path": [
              4,
              11,
              2,
              3,
              5
            ],
            "span": [
              495,
              11,
              15
            ]
          },
          {
            "path": [
              4,
              11,
              2,
              3,
              1
            ],
            "span": [
              495,
              16,
              25
            ]
          },
          {
            "path": [
              4,
              11,
              2,
              3,
              3
            ],
            "span": [
              495,
              28,
              29
            ]
          },
          {
            "path": [
              4,
              11,
              9
            ],
            "span": [
              497,
              2,
              13
            ],
            "trailingComments": " javalite_serializable\n"
          },
          {
            "path": [
              4,
              11,
              9,
              0
            ],
            "span": [
              497,
              11,
              12
            ]
          },
          {
            "path": [
              4,
              11,
              9,
              0,
              1
            ],
            "span": [
              497,
              11,
              12
            ]
          },
          {
            "path": [
              4,
              11,
              9,
              0,
              2
            ],
            "span": [
              497,
              11,
              12
            ]
          },
          {
            "path": [
              4,
              11,
              9
            ],
            "span": [
              498,
              2,
              13
            ],
            "trailingComments": " javanano_as_lite\n"
          },
          {
            "path": [
              4,
              11,
              9,
              1
            ],
            "span": [
              498,
              11,
              12
            ]
          },
          {
            "path": [
              4,
              11,
              9,
              1,
              1
            ],
            "span": [
              498,
              11,
              12
            ]
          },
          {
            "path": [
              4,
              11,
              9,
              1,
              2
            ],
            "span": [
              498,
              11,
              12
            ]
          },
          {
            "path": [
              4,
              11,
              2,
              4
            ],
            "span": [
              502,
              2,
              58
            ],
            "leadingComments": " The parser stores options it doesn't recognize here. See above.\n"
          },
          {
            "path": [
              4,
              11,
              2,
              4,
              4
            ],
            "span": [
              502,
              2,
              10
            ]
          },
          {
            "path": [
              4,
              11,
              2,
              4,
              6
            ],
            "span": [
              502,
              11,
              30
            ]
          },
          {
            "path": [
              4,
              11,
              2,
              4,
              1
            ],
            "span": [
              502,
              31,
              51
            ]
          },
          {
            "path": [
              4,
              11,
              2,
              4,
              3
            ],
            "span": [
              502,
              54,
              57
            ]
          },
          {
            "path": [
              4,
              11,
              5
            ],
            "span": [
              505,
              2,
              25
            ],
            "leadingComments": " Clients can define custom options in extensions of this message. See above.\n"
          },
          {
            "path": [
              4,
              11,
              5,
              0
            ],
            "span": [
              505,
              13,
              24
            ]
          },
          {
            "path": [
              4,
              11,
              5,
              0,
              1
            ],
            "span": [
              505,
              13,
              17
            ]
          },
          {
            "path": [
              4,
              11,
              5,
              0,
              2
            ],
            "span": [
              505,
              21,
              24
            ]
          },
          {
            "path": [
              4,
              12
            ],
            "span": [
              508,
              0,
              599,
              1
            ]
          },
          {
            "path": [
              4,
              12,
              1
            ],
            "span": [
              508,
              8,
              20
            ]
          },
          {
            "path": [
              4,
              12,
              2,
              0
            ],
            "span": [
              513,
              2,
              46
            ],
            "leadingComments": " The ctype option instructs the C++ code generator to use a different\n representation of the field than it normally would.  See the specific\n options below.  This option is not yet implemented in the open source\n release -- sorry, we'll try to include it in a future version!\n"
          },
          {
            "path": [
              4,
              12,
              2,
              0,
              4
            ],
            "span": [
              513,
              2,
              10
            ]
          },
          {
            "path": [
              4,
              12,
              2,
              0,
              6
            ],
            "span": [
              513,
              11,
              16
            ]
          },
          {
            "path": [
              4,
              12,
              2,
              0,
              1
            ],
            "span": [
              513,
              17,
              22
            ]
          },
          {
            "path": [
              4,
              12,
              2,
              0,
              3
            ],
            "span": [
              513,
              25,
              26
            ]
          },
          {
            "path": [
              4,
              12,
              2,
              0,
              8
            ],
            "span": [
              513,
              27,
              45
            ]
          },
          {
            "path": [
              4,
              12,
              2,
              0,
              7
            ],
            "span": [
              513,
              38,
              44
            ]
          },
          {
            "path": [
              4,
              12,
              4,
              0
            ],
            "span": [
              514,
              2,
              521,
              3
            ]
          },
          {
            "path": [
              4,
              12,
              4,
              0,
              1
            ],
            "span": [
              514,
              7,
              12
            ]
          },
          {
            "path": [
              4,
              12,
              4,
              0,
              2,
              0
            ],
            "span": [
              516,
              4,
              15
            ],
            "leadingComments": " Default mode.\n"
          },
          {
            "path": [
              4,
              12,
              4,
              0,
              2,
              0,
              1
            ],
            "span": [
              516,
              4,
              10
            ]
          },
          {
            "path": [
              4,
              12,
              4,
              0,
              2,
              0,
              2
            ],
            "span": [
              516,
              13,
              14
            ]
          },
          {
            "path": [
              4,
              12,
              4,
              0,
              2,
              1
            ],
            "span": [
              518,
              4,
              13
            ]
          },
          {
            "path": [
              4,
              12,
              4,
              0,
              2,
              1,
              1
            ],
            "span": [
              518,
              4,
              8
            ]
          },
          {
            "path": [
              4,
              12,
              4,
              0,
              2,
              1,
              2
            ],
            "span": [
              518,
              11,
              12
            ]
          },
          {
            "path": [
              4,
              12,
              4,
              0,
              2,
              2
            ],
            "span": [
              520,
              4,
              21
            ]
          },
          {
            "path": [
              4,
              12,
              4,
              0,
              2,
              2,
              1
            ],
            "span": [
              520,
              4,
              16
            ]
          },
          {
            "path": [
              4,
              12,
              4,
              0,
              2,
              2,
              2
            ],
            "span": [
              520,
              19,
              20
            ]
          },
          {
            "path": [
              4,
              12,
              2,
              1
            ],
            "span": [
              527,
              2,
              27
            ],
            "leadingComments": " The packed option can be enabled for repeated primitive fields to enable\n a more efficient representation on the wire. Rather than repeatedly\n writing the tag and type for each element, the entire array is encoded as\n a single length-delimited blob. In proto3, only explicit setting it to\n false will avoid using packed encoding.\n"
          },
          {
            "path": [
              4,
              12,
              2,
              1,
              4
            ],
            "span": [
              527,
              2,
              10
            ]
          },
          {
            "path": [
              4,
              12,
              2,
              1,
              5
            ],
            "span": [
              527,
              11,
              15
            ]
          },
          {
            "path": [
              4,
              12,
              2,
              1,
              1
            ],
            "span": [
              527,
              16,
              22
            ]
          },
          {
            "path": [
              4,
              12,
              2,
              1,
              3
            ],
            "span": [
              527,
              25,
              26
            ]
          },
          {
            "path": [
              4,
              12,
              2,
              2
            ],
            "span": [
              540,
              2,
              51
            ],
            "leadingComments": " The jstype option determines the JavaScript type used for values of the\n field.  The option is permitted only for 64 bit integral and fixed types\n (int64, uint64, sint64, fixed64, sfixed64).  A field with jstype JS_STRING\n is represented as JavaScript string, which avoids loss of precision that\n can happen when a large value is converted to a floating point JavaScript.\n Specifying JS_NUMBER for the jstype causes the generated JavaScript code to\n use the JavaScript \"number\" type.  The behavior of the default option\n JS_NORMAL is implementation dependent.\n\n This option is an enum to permit additional types to be added, e.g.\n goog.math.Integer.\n"
          },
          {
            "path": [
              4,
              12,
              2,
              2,
              4
            ],
            "span": [
              540,
              2,
              10
            ]
          },
          {
            "path": [
              4,
              12,
              2,
              2,
              6
            ],
            "span": [
              540,
              11,
              17
            ]
          },
          {
            "path": [
              4,
              12,
              2,
              2,
              1
            ],
            "span": [
              540,
              18,
              24
            ]
          },
          {
            "path": [
              4,
              12,
              2,
              2,
              3
            ],
            "span": [
              540,
              27,
              28
            ]
          },
          {
            "path": [
              4,
              12,
              2,
              2,
              8
            ],
            "span": [
              540,
              29,
              50
            ]
          },
          {
            "path": [
              4,
              12,
              2,
              2,
              7
            ],
            "span": [
              540,
              40,
              49
            ]
          },
          {
            "path": [
              4,
              12,
              4,
              1
            ],
            "span": [
              541,
              2,
              550,
              3
            ]
          },
          {
            "path": [
              4,
              12,
              4,
              1,
              1
            ],
            "span": [
              541,
              7,
              13
            ]
          },
          {
            "path": [
              4,
              12,
              4,
              1,
              2,
              0
            ],
            "span": [
              543,
              4,
              18
            ],
            "leadingComments": " Use the default type.\n"
          },
          {
            "path": [
              4,
              12,
              4,
              1,
              2,
              0,
              1
            ],
            "span": [
              543,
              4,
              13
            ]
          },
          {
            "path": [
              4,
              12,
              4,
              1,
              2,
              0,
              2
            ],
            "span": [
              543,
              16,
              17
            ]
          },
          {
            "path": [
              4,
              12,
              4,
              1,
              2,
              1
            ],
            "span": [
              546,
              4,
              18
            ],
            "leadingComments": " Use JavaScript strings.\n"
          },
          {
            "path": [
              4,
              12,
              4,
              1,
              2,
              1,
              1
            ],
            "span": [
              546,
              4,
              13
            ]
          },
          {
            "path": [
              4,
              12,
              4,
              1,
              2,
              1,
              2
            ],
            "span": [
              546,
              16,
              17
            ]
          },
          {
            "path": [
              4,
              12,
              4,
              1,
              2,
              2
            ],
            "span": [
              549,
              4,
              18
            ],
            "leadingComments": " Use JavaScript numbers.\n"
          },
          {
            "path": [
              4,
              12,
              4,
              1,
              2,
              2,
              1
            ],
            "span": [
              549,
              4,
              13
            ]
          },
          {
            "path": [
              4,
              12,
              4,
              1,
              2,
              2,
              2
            ],
            "span": [
              549,
              16,
              17
            ]
          },
          {
            "path": [
              4,
              12,
              2,
              3
            ],
            "span": [
              580,
              2,
              43
            ],
            "leadingComments": " Should this field be parsed lazily?  Lazy applies only to message-type\n fields.  It means that when the outer message is initially parsed, the\n inner message's contents will not be parsed but instead stored in encoded\n form.  The inner message will actually be parsed when it is first accessed.\n\n This is only a hint.  Implementations are free to choose whether to use\n eager or lazy parsing regardless of the value of this option.  However,\n setting this option true suggests that the protocol author believes that\n using lazy parsing on this field is worth the additional bookkeeping\n overhead typically needed to implement it.\n\n This option does not affect the public interface of any generated code;\n all method signatures remain the same.  Furthermore, thread-safety of the\n interface is not affected by this option; const methods remain safe to\n call from multiple threads concurrently, while non-const methods continue\n to require exclusive access.\n\n\n Note that implementations may choose not to check required fields within\n a lazy sub-message.  That is, calling IsInitialized() on the outer message\n may return true even if the inner message has missing required fields.\n This is necessary because otherwise the inner message would have to be\n parsed in order to perform the check, defeating the purpose of lazy\n parsing.  An implementation which chooses not to check required fields\n must be consistent about it.  That is, for any particular sub-message, the\n implementation must either *always* check its required fields, or *never*\n check its required fields, regardless of whether or not the message has\n been parsed.\n"
          },
          {
            "path": [
              4,
              12,
              2,
              3,
              4
            ],
            "span": [
              580,
              2,
              10
            ]
          },
          {
            "path": [
              4,
              12,
              2,
              3,
              5
            ],
            "span": [
              580,
              11,
              15
            ]
          },
          {
            "path": [
              4,
              12,
              2,
              3,
              1
            ],
            "span": [
              580,
              16,
              20
            ]
          },
          {
            "path": [
              4,
              12,
              2,
              3,
              3
            ],
            "span": [
              580,
              23,
              24
            ]
          },
          {
            "path": [
              4,
              12,
              2,
              3,
              8
            ],
            "span": [
              580,
              25,
              42
            ]
          },
          {
            "path": [
              4,
              12,
              2,
              3,
              7
            ],
            "span": [
              580,
              36,
              41
            ]
          },
          {
            "path": [
              4,
              12,
              2,
              4
            ],
            "span": [
              586,
              2,
              49
            ],
            "leadingComments": " Is this field deprecated?\n Depending on the target platform, this can emit Deprecated annotations\n for accessors, or it will be completely ignored; in the very least, this\n is a formalization for deprecating fields.\n"
          },
          {
            "path": [
              4,
              12,
              2,
              4,
              4
            ],
            "span": [
              586,
              2,
              10
            ]
          },
          {
            "path": [
              4,
              12,
              2,
              4,
              5
            ],
            "span": [
              586,
              11,
              15
            ]
          },
          {
            "path": [
              4,
              12,
              2,
              4,
              1
            ],
            "span": [
              586,
              16,
              26
            ]
          },
          {
            "path": [
              4,
              12,
              2,
              4,
              3
            ],
            "span": [
              586,
              29,
              30
            ]
          },
          {
            "path": [
              4,
              12,
              2,
              4,
              8
            ],
            "span": [
              586,
              31,
              48
            ]
          },
          {
            "path": [
              4,
              12,
              2,
              4,
              7
            ],
            "span": [
              586,
              42,
              47
            ]
          },
          {
            "path": [
              4,
              12,
              2,
              5
            ],
            "span": [
              589,
              2,
              44
            ],
            "leadingComments": " For Google-internal migration only. Do not use.\n"
          },
          {
            "path": [
              4,
              12,
              2,
              5,
              4
            ],
            "span": [
              589,
              2,
              10
            ]
          },
          {
            "path": [
              4,
              12,
              2,
              5,
              5
            ],
            "span": [
              589,
              11,
              15
            ]
          },
          {
            "path": [
              4,
              12,
              2,
              5,
              1
            ],
            "span": [
              589,
              16,
              20
            ]
          },
          {
            "path": [
              4,
              12,
              2,
              5,
              3
            ],
            "span": [
              589,
              23,
              25
            ]
          },
          {
            "path": [
              4,
              12,
              2,
              5,
              8
            ],
            "span": [
              589,
              26,
              43
            ]
          },
          {
            "path": [
              4,
              12,
              2,
              5,
              7
            ],
            "span": [
              589,
              37,
              42
            ]
          },
          {
            "path": [
              4,
              12,
              2,
              6
            ],
            "span": [
              593,
              2,
              58
            ],
            "leadingComments": " The parser stores options it doesn't recognize here. See above.\n"
          },
          {
            "path": [
              4,
              12,
              2,
              6,
              4
            ],
            "span": [
              593,
              2,
              10
            ]
          },
          {
            "path": [
              4,
              12,
              2,
              6,
              6
            ],
            "span": [
              593,
              11,
              30
            ]
          },
          {
            "path": [
              4,
              12,
              2,
              6,
              1
            ],
            "span": [
              593,
              31,
              51
            ]
          },
          {
            "path": [
              4,
              12,
              2,
              6,
              3
            ],
            "span": [
              593,
              54,
              57
            ]
          },
          {
            "path": [
              4,
              12,
              5
            ],
            "span": [
              596,
              2,
              25
            ],
            "leadingComments": " Clients can define custom options in extensions of this message. See above.\n"
          },
          {
            "path": [
              4,
              12,
              5,
              0
            ],
            "span": [
              596,
              13,
              24
            ]
          },
          {
            "path": [
              4,
              12,
              5,
              0,
              1
            ],
            "span": [
              596,
              13,
              17
            ]
          },
          {
            "path": [
              4,
              12,
              5,
              0,
              2
            ],
            "span": [
              596,
              21,
              24
            ]
          },
          {
            "path": [
              4,
              12,
              9
            ],
            "span": [
              598,
              2,
              13
            ],
            "trailingComments": " removed jtype\n"
          },
          {
            "path": [
              4,
              12,
              9,
              0
            ],
            "span": [
              598,
              11,
              12
            ]
          },
          {
            "path": [
              4,
              12,
              9,
              0,
              1
            ],
            "span": [
              598,
              11,
              12
            ]
          },
          {
            "path": [
              4,
              12,
              9,
              0,
              2
            ],
            "span": [
              598,
              11,
              12
            ]
          },
          {
            "path": [
              4,
              13
            ],
            "span": [
              601,
              0,
              607,
              1
            ]
          },
          {
            "path": [
              4,
              13,
              1
            ],
            "span": [
              601,
              8,
              20
            ]
          },
          {
            "path": [
              4,
              13,
              2,
              0
            ],
            "span": [
              603,
              2,
              58
            ],
            "leadingComments": " The parser stores options it doesn't recognize here. See above.\n"
          },
          {
            "path": [
              4,
              13,
              2,
              0,
              4
            ],
            "span": [
              603,
              2,
              10
            ]
          },
          {
            "path": [
              4,
              13,
              2,
              0,
              6
            ],
            "span": [
              603,
              11,
              30
            ]
          },
          {
            "path": [
              4,
              13,
              2,
              0,
              1
            ],
            "span": [
              603,
              31,
              51
            ]
          },
          {
            "path": [
              4,
              13,
              2,
              0,
              3
            ],
            "span": [
              603,
              54,
              57
            ]
          },
          {
            "path": [
              4,
              13,
              5
            ],
            "span": [
              606,
              2,
              25
            ],
            "leadingComments": " Clients can define custom options in extensions of this message. See above.\n"
          },
          {
            "path": [
              4,
              13,
              5,
              0
            ],
            "span": [
              606,
              13,
              24
            ]
          },
          {
            "path": [
              4,
              13,
              5,
              0,
              1
            ],
            "span": [
              606,
              13,
              17
            ]
          },
          {
            "path": [
              4,
              13,
              5,
              0,
              2
            ],
            "span": [
              606,
              21,
              24
            ]
          },
          {
            "path": [
              4,
              14
            ],
            "span": [
              609,
              0,
              628,
              1
            ]
          },
          {
            "path": [
              4,
              14,
              1
            ],
            "span": [
              609,
              8,
              19
            ]
          },
          {
            "path": [
              4,
              14,
              2,
              0
            ],
            "span": [
              613,
              2,
              32
            ],
            "leadingComments": " Set this option to true to allow mapping different tag names to the same\n value.\n"
          },
          {
            "path": [
              4,
              14,
              2,
              0,
              4
            ],
            "span": [
              613,
              2,
              10
            ]
          },
          {
            "path": [
              4,
              14,
              2,
              0,
              5
            ],
            "span": [
              613,
              11,
              15
            ]
          },
          {
            "path": [
              4,
              14,
              2,
              0,
              1
            ],
            "span": [
              613,
              16,
              27
            ]
          },
          {
            "path": [
              4,
              14,
              2,
              0,
              3
            ],
            "span": [
              613,
              30,
              31
            ]
          },
          {
            "path": [
              4,
              14,
              2,
              1
            ],
            "span": [
              619,
              2,
              49
            ],
            "leadingComments": " Is this enum deprecated?\n Depending on the target platform, this can emit Deprecated annotations\n for the enum, or it will be completely ignored; in the very least, this\n is a formalization for deprecating enums.\n"
          },
          {
            "path": [
              4,
              14,
              2,
              1,
              4
            ],
            "span": [
              619,
              2,
              10
            ]
          },
          {
            "path": [
              4,
              14,
              2,
              1,
              5
            ],
            "span": [
              619,
              11,
              15
            ]
          },
          {
            "path": [
              4,
              14,
              2,
              1,
              1
            ],
            "span": [
              619,
              16,
              26
            ]
          },
          {
            "path": [
              4,
              14,
              2,
              1,
              3
            ],
            "span": [
              619,
              29,
              30
            ]
          },
          {
            "path": [
              4,
              14,
              2,
              1,
              8
            ],
            "span": [
              619,
              31,
              48
            ]
          },
          {
            "path": [
              4,
              14,
              2,
              1,
              7
            ],
            "span": [
              619,
              42,
              47
            ]
          },
          {
            "path": [
              4,
              14,
              9
            ],
            "span": [
              621,
              2,
              13
            ],
            "trailingComments": " javanano_as_lite\n"
          },
          {
            "path": [
              4,
              14,
              9,
              0
            ],
            "span": [
              621,
              11,
              12
            ]
          },
          {
            "path": [
              4,
              14,
              9,
              0,
              1
            ],
            "span": [
              621,
              11,
              12
            ]
          },
          {
            "path": [
              4,
              14,
              9,
              0,
              2
            ],
            "span": [
              621,
              11,
              12
            ]
          },
          {
            "path": [
              4,
              14,
              2,
              2
            ],
            "span": [
              624,
              2,
              58
            ],
            "leadingComments": " The parser stores options it doesn't recognize here. See above.\n"
          },
          {
            "path": [
              4,
              14,
              2,
              2,
              4
            ],
            "span": [
              624,
              2,
              10
            ]
          },
          {
            "path": [
              4,
              14,
              2,
              2,
              6
            ],
            "span": [
              624,
              11,
              30
            ]
          },
          {
            "path": [
              4,
              14,
              2,
              2,
              1
            ],
            "span": [
              624,
              31,
              51
            ]
          },
          {
            "path": [
              4,
              14,
              2,
              2,
              3
            ],
            "span": [
              624,
              54,
              57
            ]
          },
          {
            "path": [
              4,
              14,
              5
            ],
            "span": [
              627,
              2,
              25
            ],
            "leadingComments": " Clients can define custom options in extensions of this message. See above.\n"
          },
          {
            "path": [
              4,
              14,
              5,
              0
            ],
            "span": [
              627,
              13,
              24
            ]
          },
          {
            "path": [
              4,
              14,
              5,
              0,
              1
            ],
            "span": [
              627,
              13,
              17
            ]
          },
          {
            "path": [
              4,
              14,
              5,
              0,
              2
            ],
            "span": [
              627,
              21,
              24
            ]
          },
          {
            "path": [
              4,
              15
            ],
            "span": [
              630,
              0,
              642,
              1
            ]
          },
          {
            "path": [
              4,
              15,
              1
            ],
            "span": [
              630,
              8,
              24
            ]
          },
          {
            "path": [
              4,
              15,
              2,
              0
            ],
            "span": [
              635,
              2,
              49
            ],
            "leadingComments": " Is this enum value deprecated?\n Depending on the target platform, this can emit Deprecated annotations\n for the enum value, or it will be completely ignored; in the very least,\n this is a formalization for deprecating enum values.\n"
          },
          {
            "path": [
              4,
              15,
              2,
              0,
              4
            ],
            "span": [
              635,
              2,
              10
            ]
          },
          {
            "path": [
              4,
              15,
              2,
              0,
              5
            ],
            "span": [
              635,
              11,
              15
            ]
          },
          {
            "path": [
              4,
              15,
              2,
              0,
              1
            ],
            "span": [
              635,
              16,
              26
            ]
          },
          {
            "path": [
              4,
              15,
              2,
              0,
              3
            ],
            "span": [
              635,
              29,
              30
            ]
          },
          {
            "path": [
              4,
              15,
              2,
              0,
              8
            ],
            "span": [
              635,
              31,
              48
            ]
          },
          {
            "path": [
              4,
              15,
              2,
              0,
              7
            ],
            "span": [
              635,
              42,
              47
            ]
          },
          {
            "path": [
              4,
              15,
              2,
              1
            ],
            "span": [
              638,
              2,
              58
            ],
            "leadingComments": " The parser stores options it doesn't recognize here. See above.\n"
          },
          {
            "path": [
              4,
              15,
              2,
              1,
              4
            ],
            "span": [
              638,
              2,
              10
            ]
          },
          {
            "path": [
              4,
              15,
              2,
              1,
              6
            ],
            "span": [
              638,
              11,
              30
            ]
          },
          {
            "path": [
              4,
              15,
              2,
              1,
              1
            ],
            "span": [
              638,
              31,
              51
            ]
          },
          {
            "path": [
              4,
              15,
              2,
              1,
              3
            ],
            "span": [
              638,
              54,
              57
            ]
          },
          {
            "path": [
              4,
              15,
              5
            ],
            "span": [
              641,
              2,
              25
            ],
            "leadingComments": " Clients can define custom options in extensions of this message. See above.\n"
          },
          {
            "path": [
              4,
              15,
              5,
              0
            ],
            "span": [
              641,
              13,
              24
            ]
          },
          {
            "path": [
              4,
              15,
              5,
              0,
              1
            ],
            "span": [
              641,
              13,
              17
            ]
          },
          {
            "path": [
              4,
              15,
              5,
              0,
              2
            ],
            "span": [
              641,
              21,
              24
            ]
          },
          {
            "path": [
              4,
              16
            ],
            "span": [
              644,
              0,
              662,
              1
            ]
          },
          {
            "path": [
              4,
              16,
              1
            ],
            "span": [
              644,
              8,
              22
            ]
          },
          {
            "path": [
              4,
              16,
              2,
              0
            ],
            "span": [
              655,
              2,
              50
            ],
            "leadingComments": " Is this service deprecated?\n Depending on the target platform, this can emit Deprecated annotations\n for the service, or it will be completely ignored; in the very least,\n this is a formalization for deprecating services.\n",
            "leadingDetachedComments": [
              " Note:  Field numbers 1 through 32 are reserved for Google's internal RPC\n   framework.  We apologize for hoarding these numbers to ourselves, but\n   we were already using them long before we decided to release Protocol\n   Buffers.\n"
            ]
          },
          {
            "path": [
              4,
              16,
              2,
              0,
              4
            ],
            "span": [
              655,
              2,
              10
            ]
          },
          {
            "path": [
              4,
              16,
              2,
              0,
              5
            ],
            "span": [
              655,
              11,
              15
            ]
          },
          {
            "path": [
              4,
              16,
              2,
              0,
              1
            ],
            "span": [
              655,
              16,
              26
            ]
          },
          {
            "path": [
              4,
              16,
              2,
              0,
              3
            ],
            "span": [
              655,
              29,
              31
            ]
          },
          {
            "path": [
              4,
              16,
              2,
              0,
              8
            ],
            "span": [
              655,
              32,
              49
            ]
          },
          {
            "path": [
              4,
              16,
              2,
              0,
              7
            ],
            "span": [
              655,
              43,
              48
            ]
          },
          {
            "path": [
              4,
              16,
              2,
              1
            ],
            "span": [
              658,
              2,
              58
            ],
            "leadingComments": " The parser stores options it doesn't recognize here. See above.\n"
          },
          {
            "path": [
              4,
              16,
              2,
              1,
              4
            ],
            "span": [
              658,
              2,
              10
            ]
          },
          {
            "path": [
              4,
              16,
              2,
              1,
              6
            ],
            "span": [
              658,
              11,
              30
            ]
          },
          {
            "path": [
              4,
              16,
              2,
              1,
              1
            ],
            "span": [
              658,
              31,
              51
            ]
          },
          {
            "path": [
              4,
              16,
              2,
              1,
              3
            ],
            "span": [
              658,
              54,
              57
            ]
          },
          {
            "path": [
              4,
              16,
              5
            ],
            "span": [
              661,
              2,
              25
            ],
            "leadingComments": " Clients can define custom options in extensions of this message. See above.\n"
          },
          {
            "path": [
              4,
              16,
              5,
              0
            ],
            "span": [
              661,
              13,
              24
            ]
          },
          {
            "path": [
              4,
              16,
              5,
              0,
              1
            ],
            "span": [
              661,
              13,
              17
            ]
          },
          {
            "path": [
              4,
              16,
              5,
              0,
              2
            ],
            "span": [
              661,
              21,
              24
            ]
          },
          {
            "path": [
              4,
              17
            ],
            "span": [
              664,
              0,
              693,
              1
            ]
          },
          {
            "path": [
              4,
              17,
              1
            ],
            "span": [
              664,
              8,
              21
            ]
          },
          {
            "path": [
              4,
              17,
              2,
              0
            ],
            "span": [
              675,
              2,
              50
            ],
            "leadingComments": " Is this method deprecated?\n Depending on the target platform, this can emit Deprecated annotations\n for the method, or it will be completely ignored; in the very least,\n this is a formalization for deprecating methods.\n",
            "leadingDetachedComments": [
              " Note:  Field numbers 1 through 32 are reserved for Google's internal RPC\n   framework.  We apologize for hoarding these numbers to ourselves, but\n   we were already using them long before we decided to release Protocol\n   Buffers.\n"
            ]
          },
          {
            "path": [
              4,
              17,
              2,
              0,
              4
            ],
            "span": [
              675,
              2,
              10
            ]
          },
          {
            "path": [
              4,
              17,
              2,
              0,
              5
            ],
            "span": [
              675,
              11,
              15
            ]
          },
          {
            "path": [
              4,
              17,
              2,
              0,
              1
            ],
            "span": [
              675,
              16,
              26
            ]
          },
          {
            "path": [
              4,
              17,
              2,
              0,
              3
            ],
            "span": [
              675,
              29,
              31
            ]
          },
          {
            "path": [
              4,
              17,
              2,
              0,
              8
            ],
            "span": [
              675,
              32,
              49
            ]
          },
          {
            "path": [
              4,
              17,
              2,
              0,
              7
            ],
            "span": [
              675,
              43,
              48
            ]
          },
          {
            "path": [
              4,
              17,
              4,
              0
            ],
            "span": [
              680,
              2,
              684,
              3
            ],
            "leadingComments": " Is this method side-effect-free (or safe in HTTP parlance), or idempotent,\n or neither? HTTP based RPC implementation may choose GET verb for safe\n methods, and PUT verb for idempotent methods instead of the default POST.\n"
          },
          {
            "path": [
              4,
              17,
              4,
              0,
              1
            ],
            "span": [
              680,
              7,
              23
            ]
          },
          {
            "path": [
              4,
              17,
              4,
              0,
              2,
              0
            ],
            "span": [
              681,
              4,
              28
            ]
          },
          {
            "path": [
              4,
              17,
              4,
              0,
              2,
              0,
              1
            ],
            "span": [
              681,
              4,
              23
            ]
          },
          {
            "path": [
              4,
              17,
              4,
              0,
              2,
              0,
              2
            ],
            "span": [
              681,
              26,
              27
            ]
          },
          {
            "path": [
              4,
              17,
              4,
              0,
              2,
              1
            ],
            "span": [
              682,
              4,
              24
            ],
            "trailingComments": " implies idempotent\n"
          },
          {
            "path": [
              4,
              17,
              4,
              0,
              2,
              1,
              1
            ],
            "span": [
              682,
              4,
              19
            ]
          },
          {
            "path": [
              4,
              17,
              4,
              0,
              2,
              1,
              2
            ],
            "span": [
              682,
              22,
              23
            ]
          },
          {
            "path": [
              4,
              17,
              4,
              0,
              2,
              2
            ],
            "span": [
              683,
              4,
              19
            ],
            "trailingComments": " idempotent, but may have side effects\n"
          },
          {
            "path": [
              4,
              17,
              4,
              0,
              2,
              2,
              1
            ],
            "span": [
              683,
              4,
              14
            ]
          },
          {
            "path": [
              4,
              17,
              4,
              0,
              2,
              2,
              2
            ],
            "span": [
              683,
              17,
              18
            ]
          },
          {
            "path": [
              4,
              17,
              2,
              1
            ],
            "span": [
              685,
              2,
              686,
              34
            ]
          },
          {
            "path": [
              4,
              17,
              2,
              1,
              4
            ],
            "span": [
              685,
              2,
              10
            ]
          },
          {
            "path": [
              4,
              17,
              2,
              1,
              6
            ],
            "span": [
              685,
              11,
              27
            ]
          },
          {
            "path": [
              4,
              17,
              2,
              1,
              1
            ],
            "span": [
              685,
              28,
              45
            ]
          },
          {
            "path": [
              4,
              17,
              2,
              1,
              3
            ],
            "span": [
              685,
              48,
              50
            ]
          },
          {
            "path": [
              4,
              17,
              2,
              1,
              8
            ],
            "span": [
              686,
              2,
              33
            ]
          },
          {
            "path": [
              4,
              17,
              2,
              1,
              7
            ],
            "span": [
              686,
              13,
              32
            ]
          },
          {
            "path": [
              4,
              17,
              2,
              2
            ],
            "span": [
              689,
              2,
              58
            ],
            "leadingComments": " The parser stores options it doesn't recognize here. See above.\n"
          },
          {
            "path": [
              4,
              17,
              2,
              2,
              4
            ],
            "span": [
              689,
              2,
              10
            ]
          },
          {
            "path": [
              4,
              17,
              2,
              2,
              6
            ],
            "span": [
              689,
              11,
              30
            ]
          },
          {
            "path": [
              4,
              17,
              2,
              2,
              1
            ],
            "span": [
              689,
              31,
              51
            ]
          },
          {
            "path": [
              4,
              17,
              2,
              2,
              3
            ],
            "span": [
              689,
              54,
              57
            ]
          },
          {
            "path": [
              4,
              17,
              5
            ],
            "span": [
              692,
              2,
              25
            ],
            "leadingComments": " Clients can define custom options in extensions of this message. See above.\n"
          },
          {
            "path": [
              4,
              17,
              5,
              0
            ],
            "span": [
              692,
              13,
              24
            ]
          },
          {
            "path": [
              4,
              17,
              5,
              0,
              1
            ],
            "span": [
              692,
              13,
              17
            ]
          },
          {
            "path": [
              4,
              17,
              5,
              0,
              2
            ],
            "span": [
              692,
              21,
              24
            ]
          },
          {
            "path": [
              4,
              18
            ],
            "span": [
              702,
              0,
              722,
              1
            ],
            "leadingComments": " A message representing a option the parser does not recognize. This only\n appears in options protos created by the compiler::Parser class.\n DescriptorPool resolves these when building Descriptor objects. Therefore,\n options protos in descriptor objects (e.g. returned by Descriptor::options(),\n or produced by Descriptor::CopyTo()) will never have UninterpretedOptions\n in them.\n"
          },
          {
            "path": [
              4,
              18,
              1
            ],
            "span": [
              702,
              8,
              27
            ]
          },
          {
            "path": [
              4,
              18,
              3,
              0
            ],
            "span": [
              708,
              2,
              711,
              3
            ],
            "leadingComments": " The name of the uninterpreted option.  Each string represents a segment in\n a dot-separated name.  is_extension is true iff a segment represents an\n extension (denoted with parentheses in options specs in .proto files).\n E.g.,{ [\"foo\", false], [\"bar.baz\", true], [\"qux\", false] } represents\n \"foo.(bar.baz).qux\".\n"
          },
          {
            "path": [
              4,
              18,
              3,
              0,
              1
            ],
            "span": [
              708,
              10,
              18
            ]
          },
          {
            "path": [
              4,
              18,
              3,
              0,
              2,
              0
            ],
            "span": [
              709,
              4,
              34
            ]
          },
          {
            "path": [
              4,
              18,
              3,
              0,
              2,
              0,
              4
            ],
            "span": [
              709,
              4,
              12
            ]
          },
          {
            "path": [
              4,
              18,
              3,
              0,
              2,
              0,
              5
            ],
            "span": [
              709,
              13,
              19
            ]
          },
          {
            "path": [
              4,
              18,
              3,
              0,
              2,
              0,
              1
            ],
            "span": [
              709,
              20,
              29
            ]
          },
          {
            "path": [
              4,
              18,
              3,
              0,
              2,
              0,
              3
            ],
            "span": [
              709,
              32,
              33
            ]
          },
          {
            "path": [
              4,
              18,
              3,
              0,
              2,
              1
            ],
            "span": [
              710,
              4,
              35
            ]
          },
          {
            "path": [
              4,
              18,
              3,
              0,
              2,
              1,
              4
            ],
            "span": [
              710,
              4,
              12
            ]
          },
          {
            "path": [
              4,
              18,
              3,
              0,
              2,
              1,
              5
            ],
            "span": [
              710,
              13,
              17
            ]
          },
          {
            "path": [
              4,
              18,
              3,
              0,
              2,
              1,
              1
            ],
            "span": [
              710,
              18,
              30
            ]
          },
          {
            "path": [
              4,
              18,
              3,
              0,
              2,
              1,
              3
            ],
            "span": [
              710,
              33,
              34
            ]
          },
          {
            "path": [
              4,
              18,
              2,
              0
            ],
            "span": [
              712,
              2,
              29
            ]
          },
          {
            "path": [
              4,
              18,
              2,
              0,
              4
            ],
            "span": [
              712,
              2,
              10
            ]
          },
          {
            "path": [
              4,
              18,
              2,
              0,
              6
            ],
            "span": [
              712,
              11,
              19
            ]
          },
          {
            "path": [
              4,
              18,
              2,
              0,
              1
            ],
            "span": [
              712,
              20,
              24
            ]
          },
          {
            "path": [
              4,
              18,
              2,
              0,
              3
            ],
            "span": [
              712,
              27,
              28
            ]
          },
          {
            "path": [
              4,
              18,
              2,
              1
            ],
            "span": [
              716,
              2,
              39
            ],
            "leadingComments": " The value of the uninterpreted option, in whatever type the tokenizer\n identified it as during parsing. Exactly one of these should be set.\n"
          },
          {
            "path": [
              4,
              18,
              2,
              1,
              4
            ],
            "span": [
              716,
              2,
              10
            ]
          },
          {
            "path": [
              4,
              18,
              2,
              1,
              5
            ],
            "span": [
              716,
              11,
              17
            ]
          },
          {
            "path": [
              4,
              18,
              2,
              1,
              1
            ],
            "span": [
              716,
              18,
              34
            ]
          },
          {
            "path": [
              4,
              18,
              2,
              1,
              3
            ],
            "span": [
              716,
              37,
              38
            ]
          },
          {
            "path": [
              4,
              18,
              2,
              2
            ],
            "span": [
              717,
              2,
              41
            ]
          },
          {
            "path": [
              4,
              18,
              2,
              2,
              4
            ],
            "span": [
              717,
              2,
              10
            ]
          },
          {
            "path": [
              4,
              18,
              2,
              2,
              5
            ],
            "span": [
              717,
              11,
              17
            ]
          },
          {
            "path": [
              4,
              18,
              2,
              2,
              1
            ],
            "span": [
              717,
              18,
              36
            ]
          },
          {
            "path": [
              4,
              18,
              2,
              2,
              3
            ],
            "span": [
              717,
              39,
              40
            ]
          },
          {
            "path": [
              4,
              18,
              2,
              3
            ],
            "span": [
              718,
              2,
              40
            ]
          },
          {
            "path": [
              4,
              18,
              2,
              3,
              4
            ],
            "span": [
              718,
              2,
              10
            ]
          },
          {
            "path": [
              4,
              18,
              2,
              3,
              5
            ],
            "span": [
              718,
              11,
              16
            ]
          },
          {
            "path": [
              4,
              18,
              2,
              3,
              1
            ],
            "span": [
              718,
              17,
              35
            ]
          },
          {
            "path": [
              4,
              18,
              2,
              3,
              3
            ],
            "span": [
              718,
              38,
              39
            ]
          },
          {
            "path": [
              4,
              18,
              2,
              4
            ],
            "span": [
              719,
              2,
              35
            ]
          },
          {
            "path": [
              4,
              18,
              2,
              4,
              4
            ],
            "span": [
              719,
              2,
              10
            ]
          },
          {
            "path": [
              4,
              18,
              2,
              4,
              5
            ],
            "span": [
              719,
              11,
              17
            ]
          },
          {
            "path": [
              4,
              18,
              2,
              4,
              1
            ],
            "span": [
              719,
              18,
              30
            ]
          },
          {
            "path": [
              4,
              18,
              2,
              4,
              3
            ],
            "span": [
              719,
              33,
              34
            ]
          },
          {
            "path": [
              4,
              18,
              2,
              5
            ],
            "span": [
              720,
              2,
              34
            ]
          },
          {
            "path": [
              4,
              18,
              2,
              5,
              4
            ],
            "span": [
              720,
              2,
              10
            ]
          },
          {
            "path": [
              4,
              18,
              2,
              5,
              5
            ],
            "span": [
              720,
              11,
              16
            ]
          },
          {
            "path": [
              4,
              18,
              2,
              5,
              1
            ],
            "span": [
              720,
              17,
              29
            ]
          },
          {
            "path": [
              4,
              18,
              2,
              5,
              3
            ],
            "span": [
              720,
              32,
              33
            ]
          },
          {
            "path": [
              4,
              18,
              2,
              6
            ],
            "span": [
              721,
              2,
              38
            ]
          },
          {
            "path": [
              4,
              18,
              2,
              6,
              4
            ],
            "span": [
              721,
              2,
              10
            ]
          },
          {
            "path": [
              4,
              18,
              2,
              6,
              5
            ],
            "span": [
              721,
              11,
              17
            ]
          },
          {
            "path": [
              4,
              18,
              2,
              6,
              1
            ],
            "span": [
              721,
              18,
              33
            ]
          },
          {
            "path": [
              4,
              18,
              2,
              6,
              3
            ],
            "span": [
              721,
              36,
              37
            ]
          },
          {
            "path": [
              4,
              19
            ],
            "span": [
              729,
              0,
              858,
              1
            ],
            "leadingComments": " Encapsulates information about the original source file from which a\n FileDescriptorProto was generated.\n",
            "leadingDetachedComments": [
              " ===================================================================\n Optional source code info\n"
            ]
          },
          {
            "path": [
              4,
              19,
              1
            ],
            "span": [
              729,
              8,
              22
            ]
          },
          {
            "path": [
              4,
              19,
              2,
              0
            ],
            "span": [
              773,
              2,
              33
            ],
            "leadingComments": " A Location identifies a piece of source code in a .proto file which\n corresponds to a particular definition.  This information is intended\n to be useful to IDEs, code indexers, documentation generators, and similar\n tools.\n\n For example, say we have a file like:\n   message Foo {\n     optional string foo = 1;\n   }\n Let's look at just the field definition:\n   optional string foo = 1;\n   ^       ^^     ^^  ^  ^^^\n   a       bc     de  f  ghi\n We have the following locations:\n   span   path               represents\n   [a,i)  [ 4, 0, 2, 0 ]     The whole field definition.\n   [a,b)  [ 4, 0, 2, 0, 4 ]  The label (optional).\n   [c,d)  [ 4, 0, 2, 0, 5 ]  The type (string).\n   [e,f)  [ 4, 0, 2, 0, 1 ]  The name (foo).\n   [g,h)  [ 4, 0, 2, 0, 3 ]  The number (1).\n\n Notes:\n - A location may refer to a repeated field itself (i.e. not to any\n   particular index within it).  This is used whenever a set of elements are\n   logically enclosed in a single code segment.  For example, an entire\n   extend block (possibly containing multiple extension definitions) will\n   have an outer location whose path refers to the \"extensions\" repeated\n   field without an index.\n - Multiple locations may have the same path.  This happens when a single\n   logical declaration is spread out across multiple places.  The most\n   obvious example is the \"extend\" block again -- there may be multiple\n   extend blocks in the same scope, each of which will have the same path.\n - A location's span is not always a subset of its parent's span.  For\n   example, the \"extendee\" of an extension declaration appears at the\n   beginning of the \"extend\" block and is shared by all extensions within\n   the block.\n - Just because a location's span is a subset of some other location's span\n   does not mean that it is a descendant.  For example, a \"group\" defines\n   both a type and a field in a single declaration.  Thus, the locations\n   corresponding to the type and field and their components will overlap.\n - Code which tries to interpret locations should probably be designed to\n   ignore those that it doesn't understand, as more types of locations could\n   be recorded in the future.\n"
          },
          {
            "path": [
              4,
              19,
              2,
              0,
              4
            ],
            "span": [
              773,
              2,
              10
            ]
          },
          {
            "path": [
              4,
              19,
              2,
              0,
              6
            ],
            "span": [
              773,
              11,
              19
            ]
          },
          {
            "path": [
              4,
              19,
              2,
              0,
              1
            ],
            "span": [
              773,
              20,
              28
            ]
          },
          {
            "path": [
              4,
              19,
              2,
              0,
              3
            ],
            "span": [
              773,
              31,
              32
            ]
          },
          {
            "path": [
              4,
              19,
              3,
              0
            ],
            "span": [
              774,
              2,
              857,
              3
            ]
          },
          {
            "path": [
              4,
              19,
              3,
              0,
              1
            ],
            "span": [
              774,
              10,
              18
            ]
          },
          {
            "path": [
              4,
              19,
              3,
              0,
              2,
              0
            ],
            "span": [
              798,
              4,
              44
            ],
            "leadingComments": " Identifies which part of the FileDescriptorProto was defined at this\n location.\n\n Each element is a field number or an index.  They form a path from\n the root FileDescriptorProto to the place where the definition.  For\n example, this path:\n   [ 4, 3, 2, 7, 1 ]\n refers to:\n   file.message_type(3)  // 4, 3\n       .field(7)         // 2, 7\n       .name()           // 1\n This is because FileDescriptorProto.message_type has field number 4:\n   repeated DescriptorProto message_type = 4;\n and DescriptorProto.field has field number 2:\n   repeated FieldDescriptorProto field = 2;\n and FieldDescriptorProto.name has field number 1:\n   optional string name = 1;\n\n Thus, the above path gives the location of a field name.  If we removed\n the last element:\n   [ 4, 3, 2, 7 ]\n this path refers to the whole field declaration (from the beginning\n of the label to the terminating semicolon).\n"
          },
          {
            "path": [
              4,
              19,
              3,
              0,
              2,
              0,
              4
            ],
            "span": [
              798,
              4,
              12
            ]
          },
          {
            "path": [
              4,
              19,
              3,
              0,
              2,
              0,
              5
            ],
            "span": [
              798,
              13,
              18
            ]
          },
          {
            "path": [
              4,
              19,
              3,
              0,
              2,
              0,
              1
            ],
            "span": [
              798,
              19,
              23
            ]
          },
          {
            "path": [
              4,
              19,
              3,
              0,
              2,
              0,
              3
            ],
            "span": [
              798,
              26,
              27
            ]
          },
          {
            "path": [
              4,
              19,
              3,
              0,
              2,
              0,
              8
            ],
            "span": [
              798,
              28,
              43
            ]
          },
          {
            "path": [
              4,
              19,
              3,
              0,
              2,
              0,
              8,
              2
            ],
            "span": [
              798,
              29,
              42
            ]
          },
          {
            "path": [
              4,
              19,
              3,
              0,
              2,
              1
            ],
            "span": [
              805,
              4,
              44
            ],
            "leadingComments": " Always has exactly three or four elements: start line, start column,\n end line (optional, otherwise assumed same as start line), end column.\n These are packed into a single field for efficiency.  Note that line\n and column numbers are zero-based -- typically you will want to add\n 1 to each before displaying to a user.\n"
          },
          {
            "path": [
              4,
              19,
              3,
              0,
              2,
              1,
              4
            ],
            "span": [
              805,
              4,
              12
            ]
          },
          {
            "path": [
              4,
              19,
              3,
              0,
              2,
              1,
              5
            ],
            "span": [
              805,
              13,
              18
            ]
          },
          {
            "path": [
              4,
              19,
              3,
              0,
              2,
              1,
              1
            ],
            "span": [
              805,
              19,
              23
            ]
          },
          {
            "path": [
              4,
              19,
              3,
              0,
              2,
              1,
              3
            ],
            "span": [
              805,
              26,
              27
            ]
          },
          {
            "path": [
              4,
              19,
              3,
              0,
              2,
              1,
              8
            ],
            "span": [
              805,
              28,
              43
            ]
          },
          {
            "path": [
              4,
              19,
              3,
              0,
              2,
              1,
              8,
              2
            ],
            "span": [
              805,
              29,
              42
            ]
          },
          {
            "path": [
              4,
              19,
              3,
              0,
              2,
              2
            ],
            "span": [
              854,
              4,
              41
            ],
            "leadingComments": " If this SourceCodeInfo represents a complete declaration, these are any\n comments appearing before and after the declaration which appear to be\n attached to the declaration.\n\n A series of line comments appearing on consecutive lines, with no other\n tokens appearing on those lines, will be treated as a single comment.\n\n leading_detached_comments will keep paragraphs of comments that appear\n before (but not connected to) the current element. Each paragraph,\n separated by empty lines, will be one comment element in the repeated\n field.\n\n Only the comment content is provided; comment markers (e.g. //) are\n stripped out.  For block comments, leading whitespace and an asterisk\n will be stripped from the beginning of each line other than the first.\n Newlines are included in the output.\n\n Examples:\n\n   optional int32 foo = 1;  // Comment attached to foo.\n   // Comment attached to bar.\n   optional int32 bar = 2;\n\n   optional string baz = 3;\n   // Comment attached to baz.\n   // Another line attached to baz.\n\n   // Comment attached to qux.\n   //\n   // Another line attached to qux.\n   optional double qux = 4;\n\n   // Detached comment for corge. This is not leading or trailing comments\n   // to qux or corge because there are blank lines separating it from\n   // both.\n\n   // Detached comment for corge paragraph 2.\n\n   optional string corge = 5;\n   /* Block comment attached\n    * to corge.  Leading asterisks\n    * will be removed. */\n   /* Block comment attached to\n    * grault. */\n   optional int32 grault = 6;\n\n   // ignored detached comments.\n"
          },
          {
            "path": [
              4,
              19,
              3,
              0,
              2,
              2,
              4
            ],
            "span": [
              854,
              4,
              12
            ]
          },
          {
            "path": [
              4,
              19,
              3,
              0,
              2,
              2,
              5
            ],
            "span": [
              854,
              13,
              19
            ]
          },
          {
            "path": [
              4,
              19,
              3,
              0,
              2,
              2,
              1
            ],
            "span": [
              854,
              20,
              36
            ]
          },
          {
            "path": [
              4,
              19,
              3,
              0,
              2,
              2,
              3
            ],
            "span": [
              854,
              39,
              40
            ]
          },
          {
            "path": [
              4,
              19,
              3,
              0,
              2,
              3
            ],
            "span": [
              855,
              4,
              42
            ]
          },
          {
            "path": [
              4,
              19,
              3,
              0,
              2,
              3,
              4
            ],
            "span": [
              855,
              4,
              12
            ]
          },
          {
            "path": [
              4,
              19,
              3,
              0,
              2,
              3,
              5
            ],
            "span": [
              855,
              13,
              19
            ]
          },
          {
            "path": [
              4,
              19,
              3,
              0,
              2,
              3,
              1
            ],
            "span": [
              855,
              20,
              37
            ]
          },
          {
            "path": [
              4,
              19,
              3,
              0,
              2,
              3,
              3
            ],
            "span": [
              855,
              40,
              41
            ]
          },
          {
            "path": [
              4,
              19,
              3,
              0,
              2,
              4
            ],
            "span": [
              856,
              4,
              50
            ]
          },
          {
            "path": [
              4,
              19,
              3,
              0,
              2,
              4,
              4
            ],
            "span": [
              856,
              4,
              12
            ]
          },
          {
            "path": [
              4,
              19,
              3,
              0,
              2,
              4,
              5
            ],
            "span": [
              856,
              13,
              19
            ]
          },
          {
            "path": [
              4,
              19,
              3,
              0,
              2,
              4,
              1
            ],
            "span": [
              856,
              20,
              45
            ]
          },
          {
            "path": [
              4,
              19,
              3,
              0,
              2,
              4,
              3
            ],
            "span": [
              856,
              48,
              49
            ]
          },
          {
            "path": [
              4,
              20
            ],
            "span": [
              863,
              0,
              884,
              1
            ],
            "leadingComments": " Describes the relationship between generated code and its original source\n file. A GeneratedCodeInfo message is associated with only one generated\n source file, but may contain references to different source .proto files.\n"
          },
          {
            "path": [
              4,
              20,
              1
            ],
            "span": [
              863,
              8,
              25
            ]
          },
          {
            "path": [
              4,
              20,
              2,
              0
            ],
            "span": [
              866,
              2,
              37
            ],
            "leadingComments": " An Annotation connects some span of text in generated code to an element\n of its generating .proto file.\n"
          },
          {
            "path": [
              4,
              20,
              2,
              0,
              4
            ],
            "span": [
              866,
              2,
              10
            ]
          },
          {
            "path": [
              4,
              20,
              2,
              0,
              6
            ],
            "span": [
              866,
              11,
              21
            ]
          },
          {
            "path": [
              4,
              20,
              2,
              0,
              1
            ],
            "span": [
              866,
              22,
              32
            ]
          },
          {
            "path": [
              4,
              20,
              2,
              0,
              3
            ],
            "span": [
              866,
              35,
              36
            ]
          },
          {
            "path": [
              4,
              20,
              3,
              0
            ],
            "span": [
              867,
              2,
              883,
              3
            ]
          },
          {
            "path": [
              4,
              20,
              3,
              0,
              1
            ],
            "span": [
              867,
              10,
              20
            ]
          },
          {
            "path": [
              4,
              20,
              3,
              0,
              2,
              0
            ],
            "span": [
              870,
              4,
              44
            ],
            "leadingComments": " Identifies the element in the original source .proto file. This field\n is formatted the same as SourceCodeInfo.Location.path.\n"
          },
          {
            "path": [
              4,
              20,
              3,
              0,
              2,
              0,
              4
            ],
            "span": [
              870,
              4,
              12
            ]
          },
          {
            "path": [
              4,
              20,
              3,
              0,
              2,
              0,
              5
            ],
            "span": [
              870,
              13,
              18
            ]
          },
          {
            "path": [
              4,
              20,
              3,
              0,
              2,
              0,
              1
            ],
            "span": [
              870,
              19,
              23
            ]
          },
          {
            "path": [
              4,
              20,
              3,
              0,
              2,
              0,
              3
            ],
            "span": [
              870,
              26,
              27
            ]
          },
          {
            "path": [
              4,
              20,
              3,
              0,
              2,
              0,
              8
            ],
            "span": [
              870,
              28,
              43
            ]
          },
          {
            "path": [
              4,
              20,
              3,
              0,
              2,
              0,
              8,
              2
            ],
            "span": [
              870,
              29,
              42
            ]
          },
          {
            "path": [
              4,
              20,
              3,
              0,
              2,
              1
            ],
            "span": [
              873,
              4,
              36
            ],
            "leadingComments": " Identifies the filesystem path to the original source .proto.\n"
          },
          {
            "path": [
              4,
              20,
              3,
              0,
              2,
              1,
              4
            ],
            "span": [
              873,
              4,
              12
            ]
          },
          {
            "path": [
              4,
              20,
              3,
              0,
              2,
              1,
              5
            ],
            "span": [
              873,
              13,
              19
            ]
          },
          {
            "path": [
              4,
              20,
              3,
              0,
              2,
              1,
              1
            ],
            "span": [
              873,
              20,
              31
            ]
          },
          {
            "path": [
              4,
              20,
              3,
              0,
              2,
              1,
              3
            ],
            "span": [
              873,
              34,
              35
            ]
          },
          {
            "path": [
              4,
              20,
              3,
              0,
              2,
              2
            ],
            "span": [
              877,
              4,
              29
            ],
            "leadingComments": " Identifies the starting offset in bytes in the generated code\n that relates to the identified object.\n"
          },
          {
            "path": [
              4,
              20,
              3,
              0,
              2,
              2,
              4
            ],
            "span": [
              877,
              4,
              12
            ]
          },
          {
            "path": [
              4,
              20,
              3,
              0,
              2,
              2,
              5
            ],
            "span": [
              877,
              13,
              18
            ]
          },
          {
            "path": [
              4,
              20,
              3,
              0,
              2,
              2,
              1
            ],
            "span": [
              877,
              19,
              24
            ]
          },
          {
            "path": [
              4,
              20,
              3,
              0,
              2,
              2,
              3
            ],
            "span": [
              877,
              27,
              28
            ]
          },
          {
            "path": [
              4,
              20,
              3,
              0,
              2,
              3
            ],
            "span": [
              882,
              4,
              27
            ],
            "leadingComments": " Identifies the ending offset in bytes in the generated code that\n relates to the identified offset. The end offset should be one past\n the last relevant byte (so the length of the text = end - begin).\n"
          },
          {
            "path": [
              4,
              20,
              3,
              0,
              2,
              3,
              4
            ],
            "span": [
              882,
              4,
              12
            ]
          },
          {
            "path": [
              4,
              20,
              3,
              0,
              2,
              3,
              5
            ],
            "span": [
              882,
              13,
              18
            ]
          },
          {
            "path": [
              4,
              20,
              3,
              0,
              2,
              3,
              1
            ],
            "span": [
              882,
              19,
              22
            ]
          },
          {
            "path": [
              4,
              20,
              3,
              0,
              2,
              3,
              3
            ],
            "span": [
              882,
              25,
              26
            ]
          }
        ]
      }
    }
  ],
  "compilerVersion": {
    "major": 3,
    "minor": 7,
    "patch": 0,
    "suffix": ""
  }
}