# 全局启用插件
plugins: [ "golang" ]
# 全局变量 - 支持模版解析
data:
  - WORK_PATH: "{{.Params.workPath}}"
  #  - OUT_PATH: '{{.Params.outPath}}'
  - OUT_PATH: './out'
  - TMPL_PATH: '{{.WORK_PATH}}/templates'
  - CopyRight: |-
      // Code generated by protoc-gen-goku. DO NOT EDIT.
      // source: {{.File.Name}}
  - pbPkg: 'google.golang.org/protobuf/types/descriptorpb'
  # 输出文件的包名
  - outPkg: '{{.Params.outPkgName}}'
  - excludeDescriptors:
      - FileDescriptorSet
jobs:
  ############## 任务参数示例 ###################
  - # message
    name: "generate-descriptor-message"
    enable:
      # 处理 message 和嵌套的 message
      loop: [ "message" ,"nested_message" ]
      # 被排除的不处理
      if: '{{notIn .Message.Name .excludeDescriptors }}'
    plugins: [  ]
    data:
      - TypeName: '{{.Message|GoType|toString}}'
    #    template: '/*  message: {{printf "%T" .Object}} {{showJSON .Object}}*/'
    templatePath: "{{.TMPL_PATH}}/message.tmpl"
    out: "{{.OUT_PATH}}/{{.TypeName}}.goku.pb.go"

  ############################################
  - # enum
    name: "generate-descriptor-enum"
    enable:
      loop: [ "enum","nested_enum" ]
    data:
      - TypeName: '{{.Enum|GoType|toString}}'
    templatePath: "{{.TMPL_PATH}}/enum.tmpl"
    out: "{{.OUT_PATH}}/{{.TypeName}}.goku.pb.go"
  #
  #  ############################################
  - # 测试注释
    name: "show-SourceCodeInfo"
    enable:
      loop: [ "file" ]
    plugins: [ "-golang" ]
    out: '{{.OUT_PATH}}/SourceCodeInfo_{{basename .File.Name}}.json'
    template: '{{showJSON .File.SourceCodeInfo.Location}}'
    ############################################


