plugins: [ "golang" ]

data:
  GoPackages: # 声明包路径,与【golang】插件交互使用
    # name => import path
    context: "context"
    server: "github.com/micro/go-micro/v2/server"
  # 每个项目的包名
  projectPackageName: "{{.File.Package|snakecase}}" # => foo_bar
  # 每个 service handler的输出路径
  handlerOutPath: "{{.File.Package|snakecase}}/handlers/{{.handlerPackageName}}"
  # 每个  service handler的包名
  handlerPackageName: "{{.Service.Name|snakecase}}" # => foo_bar
  # 每个 service handler的名称（public）
  HandlerName: "{{.Service.Name|camelcase}}Handler" # => FooBarHandler
  # 每个 service handler的名称（in package）
  handlerName: "{{.Service.Name|camelcase|untitle}}Handler" # => fooBarHandler
  proxyHandlerName: "{{.Service.Name|camelcase|untitle}}ProxyHandler" # => fooBarProxyHandler
  CopyRight: |-
    // Code generated by protoc-gen-goku. DO NOT EDIT.
    // source: {{.File.Name}}
jobs:
  - # dump-info
    name: "generate-service-info"
    loop: [ "service" ]
    template: '{{omit . "File" "Object"|showJSON}}'
    plugins: [ "-golang" ]
    out: "{{.handlerOutPath}}/{{.handlerName}}.source-info.json"
  - # service-handler
    name: "generate-service-handler"
    loop: [ "service" ]
    templatePath: "service.handler.tmpl"
    out: "{{.handlerOutPath}}/{{.handlerName}}.handler.go"
  - # service-micro
    name: "generate-service-micro"
    loop: [ "service" ]
    templatePath: "service.micro.tmpl"
    out: "{{.handlerOutPath}}/{{.handlerName}}.micro.go"
  - # method
    name: "generate-service-method"
    loop: [ "method" ]
    data:
      MethodName: "{{.Method.Name|camelcase}}" # => FooBar
    templatePath: "method.tmpl"
    out: "{{.handlerOutPath}}/{{.MethodName}}.go"

