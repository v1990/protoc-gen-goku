{{/* Loop: service */}}
{{- $Service:=.Service}}

{{- $pbFilePkg:=GoPackage $Service}}
{{- $serverPkg:=GoPackage "server"}}
{{- $contextPkg:=GoPackage "context"}}


{{- $RegisterHandlerFunc:= printf "Register%s" .HandlerName}}
{{- $newHandlerFunc:= printf "new%s" .HandlerName}}
{{- $handlerName:=.handlerName}}
{{- $proxyHandlerName:=.proxyHandlerName}}


{{- .CopyRight}}

package {{.handlerPackageName}}

import (
    {{$serverPkg.Import}}
    {{$pbFilePkg.Import}}
    {{$contextPkg.Import}}

    {{/* 将 Proto File import 的包也导入进来，然后在最终生成的时候清除 */}}
    // {{GoImportDependency .File}}
)

{{/* Handler interface */}}
{{$Service|GoComments}}
type {{.HandlerName}} interface{
{{range $Method := $Service.Method }}
    {{- $Input:=$Method.InputType|GoType|GoMarkImport}}
    {{- $OutPut:=$Method.OutputType|GoType|GoMarkImport}}
    {{$Method|GoComments}}
    {{$Method.Name}}(ctx {{$contextPkg}}.Context,in {{$Input}},out {{$OutPut}}) error
{{end}}
}



func {{$RegisterHandlerFunc}}(s {{$serverPkg}}.Server,opts ...{{$serverPkg}}.HandlerOption) error {
    return {{$pbFilePkg}}.{{$RegisterHandlerFunc}}(s,{{$newHandlerFunc}}(),opts...)
}

func {{$newHandlerFunc}}()*{{$handlerName}}{
    return new({{$handlerName}})
}

type {{$proxyHandlerName}} struct{
 H *{{$handlerName}}
}

{{range $Method := $Service.Method}}
{{- $MethodName:=$Method.Name}}
{{- $Input:=$Method.InputType|GoType}}
{{- $OutPut:=$Method.OutputType|GoType}}
func (t *{{$proxyHandlerName}}){{$MethodName}}(ctx {{$contextPkg}}.Context,in {{$Input}},out {{$OutPut}}) error {
    return t.H.{{$MethodName}}(ctx,in,out)
}
{{end}}







/*
{{showJSON . 2}}
*/