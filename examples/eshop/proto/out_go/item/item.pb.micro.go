// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: item/item.proto

package proto_item

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/v1990/protoc-gen-goku/examples/eshop/proto/out_go/common"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Item service

func NewItemEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Item service

type ItemService interface {
	List(ctx context.Context, in *ListItemReq, opts ...client.CallOption) (*ListItemResp, error)
	Detail(ctx context.Context, in *ItemDetailReq, opts ...client.CallOption) (*ItemDetailResp, error)
}

type itemService struct {
	c    client.Client
	name string
}

func NewItemService(name string, c client.Client) ItemService {
	return &itemService{
		c:    c,
		name: name,
	}
}

func (c *itemService) List(ctx context.Context, in *ListItemReq, opts ...client.CallOption) (*ListItemResp, error) {
	req := c.c.NewRequest(c.name, "Item.List", in)
	out := new(ListItemResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemService) Detail(ctx context.Context, in *ItemDetailReq, opts ...client.CallOption) (*ItemDetailResp, error) {
	req := c.c.NewRequest(c.name, "Item.Detail", in)
	out := new(ItemDetailResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Item service

type ItemHandler interface {
	List(context.Context, *ListItemReq, *ListItemResp) error
	Detail(context.Context, *ItemDetailReq, *ItemDetailResp) error
}

func RegisterItemHandler(s server.Server, hdlr ItemHandler, opts ...server.HandlerOption) error {
	type item interface {
		List(ctx context.Context, in *ListItemReq, out *ListItemResp) error
		Detail(ctx context.Context, in *ItemDetailReq, out *ItemDetailResp) error
	}
	type Item struct {
		item
	}
	h := &itemHandler{hdlr}
	return s.Handle(s.NewHandler(&Item{h}, opts...))
}

type itemHandler struct {
	ItemHandler
}

func (h *itemHandler) List(ctx context.Context, in *ListItemReq, out *ListItemResp) error {
	return h.ItemHandler.List(ctx, in, out)
}

func (h *itemHandler) Detail(ctx context.Context, in *ItemDetailReq, out *ItemDetailResp) error {
	return h.ItemHandler.Detail(ctx, in, out)
}
