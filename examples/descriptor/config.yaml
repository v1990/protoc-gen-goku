# 全局启用插件
plugins: [ "golang" ]
# 全局变量 - 支持模版解析
data:
  pbPkg: 'google.golang.org/protobuf/types/descriptorpb'
  GoPackages: # 声明包路径【golang】插件交互使用
    # name => import path
    context: "context"
    descriptorpb: 'google.golang.org/protobuf/types/descriptorpb'
  excludeDescriptors: # 排除生成的类型
    - FileDescriptorSet
  ProtoTypeDescriptors: # 需要实现 PbType interface 的类型
    - DescriptorProto
    - EnumDescriptorProto
  NestableDescriptors: # 需要实现 Nestable interface 的类型
    - DescriptorProto
    - EnumDescriptorProto
  CopyRight: |-
    // Code generated by protoc-gen-goku. DO NOT EDIT.
    // source: {{.File.Name}}
  # 以下：动态解析
  WORK_PATH: "{{.Params.workPath}}"
  #  - OUT_PATH: '{{.Params.outPath}}'
  OUT_PATH: 'out'
  TMPL_PATH: '{{.WORK_PATH}}/templates'
  # 输出文件的包名
  outPkg: '{{.Params.outPkgName}}'
  TypeName: '{{if (in .Loop "message" "nested_message" "enum" "nested_enum")}}  {{- .Object|GoTypeBase -}} {{end}}'

jobs:
  ############## 任务参数示例 ###################
  - # message
    name: "generate-descriptor-message"
    enable:
      # 处理 top-level message 和嵌套的 message
      loop: [ "message" ,"nested_message" ]
      # 被排除的不处理
      if: '{{notIn .Message.Name .excludeDescriptors }}'
    plugins: [ ]
    data:
#      TypeName: '{{.Message|GoTypeBase}}'
    #    template: '/*  message: {{printf "%T" .Object}} {{showJSON .Object}}*/'
    templatePath: "{{.TMPL_PATH}}/message.tmpl"
    out: "{{.OUT_PATH}}/{{.TypeName}}.goku.pb.go"

  ############################################
  - # enum
    name: "generate-descriptor-enum"
    enable:
      loop: [ "enum","nested_enum" ]
    data:
#      TypeName: '{{.Enum|GoTypeBase}}'
    templatePath: "{{.TMPL_PATH}}/enum.tmpl"
    out: "{{.OUT_PATH}}/{{.TypeName}}.goku.pb.go"
  #
  #  ############################################
  - # type table
    name: "generate-type-table"
    enable:
      loop: ["file"]
    templatePath: "{{.TMPL_PATH}}/table.tmpl"
    out: "{{.OUT_PATH}}/descriptors-table.goku.pb.go"
  - # 测试注释
    name: "show-SourceCodeInfo"
    enable:
      loop: [ "file" ]
    plugins: [ "-golang" ]
    out: '{{.OUT_PATH}}/SourceCodeInfo_{{basename .File.Name}}.json'
    template: '{{showJSON .File.SourceCodeInfo.Location}}'
    ############################################


